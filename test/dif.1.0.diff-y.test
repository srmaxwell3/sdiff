#include <string>                                             <
using std::string;                                            <
#include <map>                                                  #include <map>
using std::map;                                                 using std::map;
#include <vector>                                             | #include <string>
using std::vector;                                            | using std::string;
#include <stdio.h>                                              #include <stdio.h>
                                                                
int main (int argc, char *argv[])                               int main (int argc, char *argv[])
{                                                               {
  map<string, int> table;                                         map<string, int> table;
  vector<vector<int *> *> fileLines;                          <
                                                              <
  for (int a = 1; a < argc; a += 1) {                             for (int a = 1; a < argc; a += 1) {
    if (FILE *f = fopen (argv[a], "r")) {                           if (FILE *f = fopen (argv[a], "r")) {
      fprintf (stderr, "# Reading %s...", argv[a]);                   fprintf (stderr, "# Reading %s...", argv[a]);
      vector<int *> *lines = new vector<int *> ();            <
                                                              <
      char buffer[1024];                                              char buffer[1024];
                                                              >       unsigned n = 0;
      while (fgets (buffer, sizeof (buffer), f)) {                    while (fgets (buffer, sizeof (buffer), f)) {
        int *line = &table[buffer];                           | 	string l (buffer);
        lines->push_back (line);                              | 	table[l] += 1;
        *line += 1;                                           | 	n += 1;
      }                                                               }
      fprintf (stderr, " %u lines.\n", lines->size ());       |       fprintf (stderr, " %u lines.\n", n);
      fileLines.push_back (lines);                            <
    } else {                                                        } else {
      fprintf (stderr, "%s: Unable to open %s!  Ignoring....\ <
    }                                                               }
  }                                                               }
  printf ("# table.size () = %d\n", table.size ());           |   printf ("table.size () = %d\n", table.size ());
  map<int, int> counts;                                           map<int, int> counts;
  for (map<string, int>::iterator i = table.begin (); i != ta     for (map<string, int>::iterator i = table.begin (); i != ta
    counts[i->second] += 1;                                         counts[i->second] += 1;
  }                                                               }
  for (map<int, int>::iterator i = counts.begin (); i != coun     for (map<int, int>::iterator i = counts.begin (); i != coun
    fprintf (stderr, "# counts[%d] = %d\n", i->first, i->seco |     fprintf (stderr, "counts[%d] = %d\n", i->first, i->second
  }                                                           <
  for (int f = 0; f < fileLines.size (); f += 1) {            <
    fprintf (stderr, "# file #%d\n", f);                      <
    vector<int *> *lines = fileLines[f];                      <
    for (int l = 0; l < lines->size (); l += 1) {             <
      fprintf (stderr, "#   [%d] = %d\n", l, *(*lines)[l]);   <
    }                                                         <
  }                                                               }
}                                                               }

# Reading dif.3.cpp... 748 lines, 354 unique.
# Reading dif.2.cpp... 66 lines, 22 unique.
# Total unique lines = 376
# Pass 1 (finding matches amongst unique lines)...#   [102] [ 40] {{ },{ }}	          table[text] = line = new Line (text);
#       [ 40] [102] {{ },{ }}	          table[text] = line = new Line (text);
#   [ 99] [ 37] {{ },{ }}	        Line *line = table[text];
#       [ 37] [ 99] {{ },{ }}	        Line *line = table[text];
#   [101] [ 39] {{ },{ }}	        if (!line) {
#       [ 39] [101] {{ },{ }}	        if (!line) {
#   [ 97] [ 35] {{ },{ }}	        string text (buffer);
#       [ 35] [ 97] {{ },{ }}	        string text (buffer);
#   [ 93] [ 33] {{ },{ }}	      char buffer[1024];
#       [ 33] [ 93] {{ },{ }}	      char buffer[1024];
#   [ 96] [ 34] {{ },{ }}	      while (fgets (buffer, sizeof (buffer), f)) {
#       [ 34] [ 96] {{ },{ }}	      while (fgets (buffer, sizeof (buffer), f)) {
#   [112] [ 46] {{ },{ }}	    } else {
#       [ 46] [112] {{ },{ }}	    } else {
#   [ 30] [ 12] {{ },{ }}	  Line (string _text) :
#       [ 12] [ 30] {{ },{ }}	  Line (string _text) :
#   [ 75] [ 25] {{ },{ }}	  MapStringToLinePtr table;
#       [ 25] [ 75] {{ },{ }}	  MapStringToLinePtr table;
#   [ 76] [ 26] {{ },{ }}	  VectorLinePtr lines[2];
#       [ 26] [ 76] {{ },{ }}	  VectorLinePtr lines[2];
#   [  5] [  3] {{ },{ }}	#include <list>
#       [  3] [  5] {{ },{ }}	#include <list>
#   [  7] [  5] {{ },{ }}	#include <map>
#       [  5] [  7] {{ },{ }}	#include <map>
#   [ 11] [  9] {{ },{ }}	#include <stdio.h>
#       [  9] [ 11] {{ },{ }}	#include <stdio.h>
#   [  3] [  1] {{ },{ }}	#include <string>
#       [  1] [  3] {{ },{ }}	#include <string>
#   [  9] [  7] {{ },{ }}	#include <vector>
#       [  7] [  9] {{ },{ }}	#include <vector>
#   [ 71] [ 23] {{ },{ }}	int main (int argc, char *argv[])
#       [ 23] [ 71] {{ },{ }}	int main (int argc, char *argv[])
#   [ 29] [ 11] {{ },{ }}	struct Line : public string {
#       [ 11] [ 29] {{ },{ }}	struct Line : public string {
#   [ 66] [ 20] {{ },{ }}	typedef map<string, Line *> MapStringToLinePtr;
#       [ 20] [ 66] {{ },{ }}	typedef map<string, Line *> MapStringToLinePtr;
#   [  6] [  4] {{ },{ }}	using std::list;
#       [  4] [  6] {{ },{ }}	using std::list;
#   [  8] [  6] {{ },{ }}	using std::map;
#       [  6] [  8] {{ },{ }}	using std::map;
#   [  4] [  2] {{ },{ }}	using std::string;
#       [  2] [  4] {{ },{ }}	using std::string;
#   [ 10] [  8] {{ },{ }}	using std::vector;
#       [  8] [ 10] {{ },{ }}	using std::vector;
#   [ 72] [ 24] {{ },{ }}	{
#       [ 24] [ 72] {{ },{ }}	{
#   [747] [ 65] {{ },{ }}	}
#       [ 65] [747] {{ },{ }}	}
 found 24 matched lines (24 total).
# Pass #2 (spreading matches down)...#   [  0] [  0] {{ },{ }}	<bof>
#   [  1] [ -1] {{   1 },{ }}	#include <algorithm>
#       [  1] [  3] {{ },{ }}	#include <string>
#   [  2] [ -1] {{   2 },{ }}	using std::find;
#   [  3] [  1] {{ },{ }}	#include <string>
#   [  4] [  2] {{ },{ }}	using std::string;
#       [  2] [  4] {{ },{ }}	using std::string;
#   [  5] [  3] {{ },{ }}	#include <list>
#       [  3] [  5] {{ },{ }}	#include <list>
#   [  6] [  4] {{ },{ }}	using std::list;
#       [  4] [  6] {{ },{ }}	using std::list;
#   [  7] [  5] {{ },{ }}	#include <map>
#       [  5] [  7] {{ },{ }}	#include <map>
#   [  8] [  6] {{ },{ }}	using std::map;
#       [  6] [  8] {{ },{ }}	using std::map;
#   [  9] [  7] {{ },{ }}	#include <vector>
#       [  7] [  9] {{ },{ }}	#include <vector>
#   [ 10] [  8] {{ },{ }}	using std::vector;
#       [  8] [ 10] {{ },{ }}	using std::vector;
#   [ 11] [  9] {{ },{ }}	#include <stdio.h>
#       [  9] [ 11] {{ },{ }}	#include <stdio.h>
#   [ 12] [ -1] {{},{  10  19  22  27  31  36  38 }}	
#       [ 10] [ -1] {{},{  10  19  22  27  31  36  38 }}	
#   [ 12] [ 10] {{},{  19  22  27  31  36  38 }}	
#       [ 10] [ 12] {{},{  19  22  27  31  36  38 }}	
#   [ 14] [ -1] {{  14 },{ }}	  Default,
#   [ 15] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 16] [ -1] {{  16 },{ }}	  Context,
#   [ 17] [ -1] {{  17 },{ }}	  EdScript,
#   [ 18] [ -1] {{  18 },{ }}	  IfThenElse,
#   [ 19] [ -1] {{  19 },{ }}	  Normal,
#   [ 20] [ -1] {{  20 },{ }}	  RCS,
#   [ 21] [ -1] {{  21 },{ }}	  SideBySide,
#   [ 22] [ -1] {{  22 },{ }}	  Unified
#   [ 23] [ -1] {{  23  50  64 },{  18 }}	};
#   [ 24] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 25] [ -1] {{  25 },{ }}	DiffFormat diffFormat = Unified;
#   [ 26] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 27] [ -1] {{  27 },{ }}	int optVerbose = 1;
#   [ 28] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 29] [ 11] {{ },{ }}	struct Line : public string {
#   [ 30] [ 12] {{ },{ }}	  Line (string _text) :
#       [ 12] [ 30] {{ },{ }}	  Line (string _text) :
#   [ 31] [ -1] {{  31 },{ }}	    string (_text)
#       [ 13] [ -1] {{ },{  13 }}	    text (_text)
#   [ 32] [ -1] {{  32  56 },{  14 }}	  {
#   [ 33] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [ 34] [ -1] {{  34 },{ }}	  ~Line () {
#   [ 35] [ -1] {{  35 },{ }}	    copies[0].erase (copies[0].begin (), copies[0].end ());
#   [ 36] [ -1] {{  36 },{ }}	    copies[1].erase (copies[1].begin (), copies[1].end ());
#   [ 37] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [ 38] [ -1] {{  38  58 },{ }}	  void Dump (FILE *out) {
#   [ 39] [ -1] {{  39 },{ }}	    fprintf (out, "{{ ");
#   [ 40] [ -1] {{  40 },{ }}	    for (list<unsigned>::iterator i = copies[0].begin (); i != copies[0].end (); i++) {
#   [ 41] [ -1] {{  41  45 },{ }}	      fprintf (out, "%u ", *i);
#   [ 42] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [ 43] [ -1] {{  43 },{ }}	    fprintf (out, "},{ ");
#   [ 44] [ -1] {{  44 },{ }}	    for (list<unsigned>::iterator i = copies[1].begin (); i != copies[1].end (); i++) {
#   [ 45] [ -1] {{  41  45 },{ }}	      fprintf (out, "%u ", *i);
#   [ 46] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [ 47] [ -1] {{  47 },{ }}	    fprintf (out, "}}\t%s", c_str ());
#   [ 48] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [ 49] [ -1] {{  49 },{ }}	  list<unsigned> copies[2];
#   [ 50] [ -1] {{  23  50  64 },{  18 }}	};
#   [ 51] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 52] [ -1] {{  52 },{ }}	struct LinePtr {
#   [ 53] [ -1] {{  53 },{ }}	  LinePtr (Line *_line) :
#   [ 54] [ -1] {{  54 },{ }}	    line (_line),
#   [ 55] [ -1] {{  55 },{ }}	    l (~0u)
#   [ 56] [ -1] {{  32  56 },{  14 }}	  {
#   [ 57] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [ 58] [ -1] {{  38  58 },{ }}	  void Dump (FILE *out) {
#   [ 59] [ -1] {{  59 },{ }}	    fprintf (out, "[%d] ", l);
#   [ 60] [ -1] {{  60 },{ }}	    line->Dump (out);
#   [ 61] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [ 62] [ -1] {{  62 },{ }}	  Line *line;
#   [ 63] [ -1] {{  63 },{ }}	  unsigned l;
#   [ 64] [ -1] {{  23  50  64 },{  18 }}	};
#   [ 65] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 66] [ 20] {{ },{ }}	typedef map<string, Line *> MapStringToLinePtr;
#   [ 67] [ -1] {{  67 },{ }}	typedef vector<LinePtr> VectorLinePtr;
#       [ 21] [ -1] {{ },{  21 }}	typedef vector<Line *> VectorLinePtr;
#   [ 68] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 69] [ -1] {{  69 },{ }}	char *ARGV0 = "dif2";
#   [ 70] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 71] [ 23] {{ },{ }}	int main (int argc, char *argv[])
#   [ 72] [ 24] {{ },{ }}	{
#       [ 24] [ 72] {{ },{ }}	{
#   [ 73] [ -1] {{  73 },{ }}	  char const *files[2] = { 0, 0 };
#       [ 25] [ 75] {{ },{ }}	  MapStringToLinePtr table;
#   [ 74] [ -1] {{  15  24  26  28  51  65  68  70  74  77  82  84  87  92  95  98 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  27  31  36  38 }}	
#   [ 75] [ 25] {{ },{ }}	  MapStringToLinePtr table;
#   [ 76] [ 26] {{ },{ }}	  VectorLinePtr lines[2];
#       [ 26] [ 76] {{ },{ }}	  VectorLinePtr lines[2];
#   [ 77] [ -1] {{},{  19  22  27  31  36  38 }}	
#       [ 27] [ -1] {{},{  19  22  27  31  36  38 }}	
#   [ 77] [ 27] {{},{  19  22  31  36  38 }}	
#       [ 27] [ 77] {{},{  19  22  31  36  38 }}	
#   [ 79] [ -1] {{  79 },{ }}	  unsigned nMatchedBlocks = 0;
#   [ 80] [ -1] {{  80 },{ }}	  unsigned nTotalMatchedLines = 0;
#   [ 81] [ -1] {{  81 },{ }}	  unsigned nMatchedLines = 0;
#   [ 82] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 83] [ -1] {{  83 },{ }}	  // Read the old [0] file, and the new [1] file.
#   [ 84] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 85] [ -1] {{  85 },{ }}	  for (int a = 1, n = 0; a < argc && n < 2; a += 1, n += 1) {
#   [ 86] [ -1] {{  86 },{ }}	    files[n] = argv[a];
#   [ 87] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 88] [ -1] {{  88 },{ }}	    if (FILE *f = fopen (files[n], "r")) {
#   [ 89] [ -1] {{  89 109 },{ }}	      if (0 < optVerbose) {
#   [ 90] [ -1] {{  90 },{ }}	        fprintf (stderr, "# Reading %s...", files[n]);
#   [ 91] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [ 92] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 93] [ 33] {{ },{ }}	      char buffer[1024];
#   [ 94] [ -1] {{  94 },{ }}	      unsigned nUniq = 0;
#       [ 34] [ 96] {{ },{ }}	      while (fgets (buffer, sizeof (buffer), f)) {
#   [ 95] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 96] [ 34] {{ },{ }}	      while (fgets (buffer, sizeof (buffer), f)) {
#   [ 97] [ 35] {{ },{ }}	        string text (buffer);
#       [ 35] [ 97] {{ },{ }}	        string text (buffer);
#   [ 98] [ -1] {{},{  19  22  31  36  38 }}	
#       [ 36] [ -1] {{},{  19  22  31  36  38 }}	
#   [ 98] [ 36] {{},{  19  22  31  38 }}	
#       [ 36] [ 98] {{},{  19  22  31  38 }}	
#   [100] [ -1] {{},{  19  22  31  38 }}	
#   [101] [ 39] {{ },{ }}	        if (!line) {
#   [102] [ 40] {{ },{ }}	          table[text] = line = new Line (text);
#       [ 40] [102] {{ },{ }}	          table[text] = line = new Line (text);
#   [103] [ -1] {{ 103 },{ }}	          nUniq += 1;
#       [ 41] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [104] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [105] [ -1] {{ 105 },{ }}	        line->copies[n].push_back (lines[n].size ());
#   [106] [ -1] {{ 106 },{ }}	        lines[n].push_back (line);
#   [107] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [108] [ -1] {{},{  19  22  31  38 }}	
#   [109] [ -1] {{  89 109 },{ }}	      if (0 < optVerbose) {
#   [110] [ -1] {{ 110 },{ }}	        fprintf (stderr, " %u lines, %u unique.\n", lines[n].size (), nUniq);
#   [111] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [112] [ 46] {{ },{ }}	    } else {
#   [113] [ -1] {{ 113 },{ }}	      fprintf (stderr, "%s: Unable to open %s!  Exiting....\n", ARGV0, files[n]);
#       [ 47] [ -1] {{ },{  47 }}	      fprintf (stderr, "%s: Unable to open %s!  Ignoring....\n", argv[a]);
#   [114] [ -1] {{ 114 },{ }}	      perror (ARGV0);
#   [115] [ -1] {{ 115 },{ }}	      exit (1);
#   [116] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [117] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [118] [ -1] {{},{  19  22  31  38 }}	
#   [119] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [120] [ -1] {{ 120 },{ }}	    printf ("# Total unique lines = %d\n", table.size ());
#   [121] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [122] [ -1] {{},{  19  22  31  38 }}	
#   [123] [ -1] {{ 123 },{ }}	  // map<int, int> counts;
#   [124] [ -1] {{ 124 },{ }}	  // for (MapStringToLinePtr::iterator i = table.begin (); i != table.end (); i++) {
#   [125] [ -1] {{ 125 },{ }}	  //   Line *l = i->second;
#   [126] [ -1] {{ 126 },{ }}	  //   counts[l->counts[0].size () + l->counts[1].size ()] += 1;
#   [127] [ -1] {{ 127 130 },{ }}	  // }
#   [128] [ -1] {{ 128 },{ }}	  // for (map<int, int>::iterator i = counts.begin (); i != counts.end (); i++) {
#   [129] [ -1] {{ 129 },{ }}	  //   fprintf (stderr, "# counts[%d] = %d\n", i->first, i->second);
#   [130] [ -1] {{ 127 130 },{ }}	  // }
#   [131] [ -1] {{},{  19  22  31  38 }}	
#   [132] [ -1] {{ 132 },{ }}	  // Perform pass #1, in which we find all explicit matches amongst
#   [133] [ -1] {{ 133 },{ }}	  // the unique lines.  For every unique line that appears the same
#   [134] [ -1] {{ 134 },{ }}	  // number of times in both files, we declare the lines to match.
#   [135] [ -1] {{},{  19  22  31  38 }}	
#   [136] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [137] [ -1] {{ 137 },{ }}	    fprintf (stderr, "# Pass 1 (finding matches amongst unique lines)...");
#   [138] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [139] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [140] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [141] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [142] [ -1] {{ 142 386 },{ }}	  for (MapStringToLinePtr::iterator i = table.begin (); i != table.end (); i++) {
#   [143] [ -1] {{ 143 387 },{  53 }}	    Line *l = i->second;
#   [144] [ -1] {{},{  19  22  31  38 }}	
#   [145] [ -1] {{ 145 },{ }}	    // If the number of old and new lines match, then we declare that
#   [146] [ -1] {{ 146 },{ }}	    // they are (all) the same line.  Note, it isn't possible for the
#   [147] [ -1] {{ 147 },{ }}	    // numbers of both files to be 0.
#   [148] [ -1] {{},{  19  22  31  38 }}	
#   [149] [ -1] {{ 149 392 },{ }}	    // (In the original algorithm, we only recognized a match, here,
#   [150] [ -1] {{ 150 393 },{ }}	    // if there was exactly 1 copy for each file.)
#   [151] [ -1] {{},{  19  22  31  38 }}	
#   [152] [ -1] {{ 152 },{ }}	    if (l->copies[0].size () == l->copies[1].size ()) {
#   [153] [ -1] {{ 153 256 348 396 },{ }}	      nMatchedLines += 1;
#   [154] [ -1] {{},{  19  22  31  38 }}	
#   [155] [ -1] {{ 155 398 },{ }}	      // For each matched line in the new file, mark it with the
#   [156] [ -1] {{ 156 399 },{ }}	      // corresponding line (number) in the old file.
#   [157] [ -1] {{},{  19  22  31  38 }}	
#   [158] [ -1] {{ 158 },{ }}	      while (!l->copies[0].empty ()) {
#   [159] [ -1] {{ 159 },{ }}	        unsigned o = l->copies[0].front ();
#   [160] [ -1] {{ 160 },{ }}	        unsigned n = l->copies[1].front ();
#   [161] [ -1] {{},{  19  22  31  38 }}	
#   [162] [ -1] {{ 162 },{ }}	        // Match up the pair.
#   [163] [ -1] {{},{  19  22  31  38 }}	
#   [164] [ -1] {{ 164 },{ }}	        lines[0][o].l = n;
#   [165] [ -1] {{ 165 },{ }}	        lines[1][n].l = o;
#   [166] [ -1] {{},{  19  22  31  38 }}	
#   [167] [ -1] {{ 167 },{ }}	        // Remove the matched line numbers from the lists.
#   [168] [ -1] {{},{  19  22  31  38 }}	
#   [169] [ -1] {{ 169 },{ }}	        l->copies[0].pop_front ();
#   [170] [ -1] {{ 170 },{ }}	        l->copies[1].pop_front ();
#   [171] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [172] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [173] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [174] [ -1] {{ 174 260 352 415 },{ }}	  nTotalMatchedLines += nMatchedLines;
#   [175] [ -1] {{},{  19  22  31  38 }}	
#   [176] [ -1] {{ 176 263 354 417 578 },{ }}	  // Let's see the intermediate results.
#   [177] [ -1] {{},{  19  22  31  38 }}	
#   [178] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [179] [ -1] {{ 179 420 },{ }}	    fprintf (stderr, " found %u matched lines (%u total).\n", nMatchedLines, nTotalMatchedLines);
#   [180] [ -1] {{},{  19  22  31  38 }}	
#   [181] [ -1] {{ 181 273 365 422 589 },{ }}	    if (1 < optVerbose) {
#   [182] [ -1] {{ 182 274 366 423 590 },{ }}	      for (int f = 0; f < 2; f += 1) {
#   [183] [ -1] {{ 183 275 367 424 591 },{ }}	        fprintf (stderr, "# file #%d\n", f + 1);
#   [184] [ -1] {{ 184 276 368 425 592 },{ }}	        for (int l = 0; l < lines[f].size (); l += 1) {
#   [185] [ -1] {{ 185 277 369 426 593 },{ }}	          fprintf (stderr, "#   [%d] ", l);
#   [186] [ -1] {{ 186 278 370 427 594 },{ }}	          lines[f][l].Dump (stderr);
#   [187] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [188] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [189] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [190] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [191] [ -1] {{},{  19  22  31  38 }}	
#   [192] [ -1] {{ 192 },{ }}	  // Perform Pass #2, in which we attempt to 'widen' blocks of matched
#   [193] [ -1] {{ 193 },{ }}	  // lines, by appending lines which are the same in both files.
#   [194] [ -1] {{},{  19  22  31  38 }}	
#   [195] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [196] [ -1] {{ 196 },{ }}	    fprintf (stderr, "# Pass #2 (spreading matches down)...");
#   [197] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [198] [ -1] {{},{  19  22  31  38 }}	
#   [199] [ -1] {{ 199 291 442 },{ }}	  nMatchedBlocks = 0;
#   [200] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [201] [ -1] {{},{  19  22  31  38 }}	
#   [202] [ -1] {{ 202 },{ }}	  // Starting at the top of the old file,...
#   [203] [ -1] {{},{  19  22  31  38 }}	
#   [204] [ -1] {{ 204 },{ }}	  for (unsigned o = 0; o < lines[0].size (); o += 1) {
#   [205] [ -1] {{},{  19  22  31  38 }}	
#   [206] [ -1] {{ 206 298 },{ }}	    // ... skip any currently unmatched lines...
#   [207] [ -1] {{},{  19  22  31  38 }}	
#   [208] [ -1] {{ 208 300 },{ }}	    if (lines[0][o].l == ~0) {
#   [209] [ -1] {{ 209 301 496 },{ }}	      continue;
#   [210] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [211] [ -1] {{},{  19  22  31  38 }}	
#   [212] [ -1] {{ 212 304 },{ }}	    // ... until we find an [already] matched line.  Then, skip over
#   [213] [ -1] {{ 213 305 },{ }}	    // the set of 1 or more matched lines, until we reach any
#   [214] [ -1] {{ 214 306 },{ }}	    // following, still-unmatched line.
#   [215] [ -1] {{},{  19  22  31  38 }}	
#   [216] [ -1] {{ 216 308 },{ }}	    unsigned n;
#   [217] [ -1] {{ 217 309 },{ }}	    do {
#   [218] [ -1] {{ 218 },{ }}	      n = lines[0][o].l + 1;
#   [219] [ -1] {{ 219 469 494 },{ }}	      o += 1;
#   [220] [ -1] {{ 220 },{ }}	    } while (o < lines[0].size () && lines[0][o].l != ~0);
#   [221] [ -1] {{},{  19  22  31  38 }}	
#   [222] [ -1] {{ 222 },{ }}	    // Now, o - 1 is the line number of the last matched old line, and
#   [223] [ -1] {{ 223 },{ }}	    // n - 1 is the line number of the last matched new line.  We want
#   [224] [ -1] {{ 224 316 },{ }}	    // to add new old and new lines, if they match.
#   [225] [ -1] {{},{  19  22  31  38 }}	
#   [226] [ -1] {{ 226 318 },{ }}	    // Finally, attempt to add unmatched lines to the preceeding
#   [227] [ -1] {{ 227 319 },{ }}	    // matched set.
#   [228] [ -1] {{},{  19  22  31  38 }}	
#   [229] [ -1] {{ 229 },{ }}	    for (; o < lines[0].size () && lines[0][o].l == ~0; o += 1, n += 1) {
#   [230] [ -1] {{},{  19  22  31  38 }}	
#   [231] [ -1] {{ 231 323 },{ }}	      // If the [next] pair of old and new lines aren't the same line, we're done.
#   [232] [ -1] {{},{  19  22  31  38 }}	
#   [233] [ -1] {{ 233 325 },{ }}	      if (lines[0][o].line != lines[1][n].line) {
#   [234] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [235] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [236] [ -1] {{},{  19  22  31  38 }}	
#   [237] [ -1] {{ 237 329 404 },{ }}	      // Match up the pair.
#   [238] [ -1] {{},{  19  22  31  38 }}	
#   [239] [ -1] {{ 239 331 406 },{ }}	      lines[0][o].l = n;
#   [240] [ -1] {{ 240 332 407 },{ }}	      lines[1][n].l = o;
#   [241] [ -1] {{},{  19  22  31  38 }}	
#   [242] [ -1] {{ 242 334 },{ }}	      // Remove the matched line numbers form the lists.
#   [243] [ -1] {{},{  19  22  31  38 }}	
#   [244] [ -1] {{ 244 336 },{ }}	      Line *line = lines[0][o].line;
#   [245] [ -1] {{ 245 337 },{ }}	      list<unsigned> &oldCopies = line->copies[0];
#   [246] [ -1] {{ 246 338 },{ }}	      list<unsigned>::iterator oL = find (oldCopies.begin (), oldCopies.end (), o);
#   [247] [ -1] {{ 247 339 },{ }}	      if (oL != oldCopies.end ()) {
#   [248] [ -1] {{ 248 340 },{ }}	        oldCopies.erase (oL);
#   [249] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [250] [ -1] {{ 250 342 },{ }}	      list<unsigned> &newCopies = line->copies[0];
#   [251] [ -1] {{ 251 343 },{ }}	      list<unsigned>::iterator nL = find (newCopies.begin (), newCopies.end (), n);
#   [252] [ -1] {{ 252 344 },{ }}	      if (nL != newCopies.end ()) {
#   [253] [ -1] {{ 253 345 },{ }}	        newCopies.erase (nL);
#   [254] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [255] [ -1] {{},{  19  22  31  38 }}	
#   [256] [ -1] {{ 153 256 348 396 },{ }}	      nMatchedLines += 1;
#   [257] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [258] [ -1] {{ 258 350 },{ }}	    nMatchedBlocks += 1;
#   [259] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [260] [ -1] {{ 174 260 352 415 },{ }}	  nTotalMatchedLines += nMatchedLines;
#   [261] [ -1] {{ 261 },{ }}	  nTotalMatchedBlocks += nMatchedBlocks;
#   [262] [ -1] {{},{  19  22  31  38 }}	
#   [263] [ -1] {{ 176 263 354 417 578 },{ }}	  // Let's see the intermediate results.
#   [264] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [265] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [266] [ -1] {{ 266 357 581 },{ }}	    fprintf (stderr,
#   [267] [ -1] {{ 267 358 582 },{ }}	             " found %u/%u matched lines/blocks (%u/%u totals).\n",
#   [268] [ -1] {{ 268 359 583 },{ }}	             nMatchedLines,
#   [269] [ -1] {{ 269 360 584 },{ }}	             nMatchedBlocks,
#   [270] [ -1] {{ 270 361 585 },{ }}	             nTotalMatchedLines,
#   [271] [ -1] {{ 271 362 586 },{ }}	             nTotalMatchedBlocks
#   [272] [ -1] {{ 272 363 587 },{ }}	            );
#   [273] [ -1] {{ 181 273 365 422 589 },{ }}	    if (1 < optVerbose) {
#   [274] [ -1] {{ 182 274 366 423 590 },{ }}	      for (int f = 0; f < 2; f += 1) {
#   [275] [ -1] {{ 183 275 367 424 591 },{ }}	        fprintf (stderr, "# file #%d\n", f + 1);
#   [276] [ -1] {{ 184 276 368 425 592 },{ }}	        for (int l = 0; l < lines[f].size (); l += 1) {
#   [277] [ -1] {{ 185 277 369 426 593 },{ }}	          fprintf (stderr, "#   [%d] ", l);
#   [278] [ -1] {{ 186 278 370 427 594 },{ }}	          lines[f][l].Dump (stderr);
#   [279] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [280] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [281] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [282] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [283] [ -1] {{},{  19  22  31  38 }}	
#   [284] [ -1] {{ 284 },{ }}	  // Perform Pass #3, in which we attempt to 'widen' blocks of matched
#   [285] [ -1] {{ 285 },{ }}	  // lines, by prepending lines which are the same in both files.
#   [286] [ -1] {{},{  19  22  31  38 }}	
#   [287] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [288] [ -1] {{ 288 },{ }}	    fprintf (stderr, "# Pass #3 (spreading matches up)...");
#   [289] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [290] [ -1] {{},{  19  22  31  38 }}	
#   [291] [ -1] {{ 199 291 442 },{ }}	  nMatchedBlocks = 0;
#   [292] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [293] [ -1] {{},{  19  22  31  38 }}	
#   [294] [ -1] {{ 294 },{ }}	  // Starting at the bottom of the old file,...
#   [295] [ -1] {{},{  19  22  31  38 }}	
#   [296] [ -1] {{ 296 },{ }}	  for (int o = lines[0].size (); 0 <= o; o -= 1) {
#   [297] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [298] [ -1] {{ 206 298 },{ }}	    // ... skip any currently unmatched lines...
#   [299] [ -1] {{},{  19  22  31  38 }}	
#   [300] [ -1] {{ 208 300 },{ }}	    if (lines[0][o].l == ~0) {
#   [301] [ -1] {{ 209 301 496 },{ }}	      continue;
#   [302] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [303] [ -1] {{},{  19  22  31  38 }}	
#   [304] [ -1] {{ 212 304 },{ }}	    // ... until we find an [already] matched line.  Then, skip over
#   [305] [ -1] {{ 213 305 },{ }}	    // the set of 1 or more matched lines, until we reach any
#   [306] [ -1] {{ 214 306 },{ }}	    // following, still-unmatched line.
#   [307] [ -1] {{},{  19  22  31  38 }}	
#   [308] [ -1] {{ 216 308 },{ }}	    unsigned n;
#   [309] [ -1] {{ 217 309 },{ }}	    do {
#   [310] [ -1] {{ 310 },{ }}	      n = lines[0][o].l - 1;
#   [311] [ -1] {{ 311 },{ }}	      o -= 1;
#   [312] [ -1] {{ 312 },{ }}	    } while (0 <= o && lines[0][o].l != ~0);
#   [313] [ -1] {{},{  19  22  31  38 }}	
#   [314] [ -1] {{ 314 },{ }}	    // Now, o + 1 is the line number of the last matched old line, and
#   [315] [ -1] {{ 315 },{ }}	    // n + 1 is the line number of the last matched new line.  We want
#   [316] [ -1] {{ 224 316 },{ }}	    // to add new old and new lines, if they match.
#   [317] [ -1] {{},{  19  22  31  38 }}	
#   [318] [ -1] {{ 226 318 },{ }}	    // Finally, attempt to add unmatched lines to the preceeding
#   [319] [ -1] {{ 227 319 },{ }}	    // matched set.
#   [320] [ -1] {{},{  19  22  31  38 }}	
#   [321] [ -1] {{ 321 },{ }}	    for (; 0 <= o && lines[0][o].l == ~0; o -= 1, n -= 1) {
#   [322] [ -1] {{},{  19  22  31  38 }}	
#   [323] [ -1] {{ 231 323 },{ }}	      // If the [next] pair of old and new lines aren't the same line, we're done.
#   [324] [ -1] {{},{  19  22  31  38 }}	
#   [325] [ -1] {{ 233 325 },{ }}	      if (lines[0][o].line != lines[1][n].line) {
#   [326] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [327] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [328] [ -1] {{},{  19  22  31  38 }}	
#   [329] [ -1] {{ 237 329 404 },{ }}	      // Match up the pair.
#   [330] [ -1] {{},{  19  22  31  38 }}	
#   [331] [ -1] {{ 239 331 406 },{ }}	      lines[0][o].l = n;
#   [332] [ -1] {{ 240 332 407 },{ }}	      lines[1][n].l = o;
#   [333] [ -1] {{},{  19  22  31  38 }}	
#   [334] [ -1] {{ 242 334 },{ }}	      // Remove the matched line numbers form the lists.
#   [335] [ -1] {{},{  19  22  31  38 }}	
#   [336] [ -1] {{ 244 336 },{ }}	      Line *line = lines[0][o].line;
#   [337] [ -1] {{ 245 337 },{ }}	      list<unsigned> &oldCopies = line->copies[0];
#   [338] [ -1] {{ 246 338 },{ }}	      list<unsigned>::iterator oL = find (oldCopies.begin (), oldCopies.end (), o);
#   [339] [ -1] {{ 247 339 },{ }}	      if (oL != oldCopies.end ()) {
#   [340] [ -1] {{ 248 340 },{ }}	        oldCopies.erase (oL);
#   [341] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [342] [ -1] {{ 250 342 },{ }}	      list<unsigned> &newCopies = line->copies[0];
#   [343] [ -1] {{ 251 343 },{ }}	      list<unsigned>::iterator nL = find (newCopies.begin (), newCopies.end (), n);
#   [344] [ -1] {{ 252 344 },{ }}	      if (nL != newCopies.end ()) {
#   [345] [ -1] {{ 253 345 },{ }}	        newCopies.erase (nL);
#   [346] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [347] [ -1] {{},{  19  22  31  38 }}	
#   [348] [ -1] {{ 153 256 348 396 },{ }}	      nMatchedLines += 1;
#   [349] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [350] [ -1] {{ 258 350 },{ }}	    nMatchedBlocks += 1;
#   [351] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [352] [ -1] {{ 174 260 352 415 },{ }}	  nTotalMatchedLines += nMatchedLines;
#   [353] [ -1] {{},{  19  22  31  38 }}	
#   [354] [ -1] {{ 176 263 354 417 578 },{ }}	  // Let's see the intermediate results.
#   [355] [ -1] {{},{  19  22  31  38 }}	
#   [356] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [357] [ -1] {{ 266 357 581 },{ }}	    fprintf (stderr,
#   [358] [ -1] {{ 267 358 582 },{ }}	             " found %u/%u matched lines/blocks (%u/%u totals).\n",
#   [359] [ -1] {{ 268 359 583 },{ }}	             nMatchedLines,
#   [360] [ -1] {{ 269 360 584 },{ }}	             nMatchedBlocks,
#   [361] [ -1] {{ 270 361 585 },{ }}	             nTotalMatchedLines,
#   [362] [ -1] {{ 271 362 586 },{ }}	             nTotalMatchedBlocks
#   [363] [ -1] {{ 272 363 587 },{ }}	            );
#   [364] [ -1] {{},{  19  22  31  38 }}	
#   [365] [ -1] {{ 181 273 365 422 589 },{ }}	    if (1 < optVerbose) {
#   [366] [ -1] {{ 182 274 366 423 590 },{ }}	      for (int f = 0; f < 2; f += 1) {
#   [367] [ -1] {{ 183 275 367 424 591 },{ }}	        fprintf (stderr, "# file #%d\n", f + 1);
#   [368] [ -1] {{ 184 276 368 425 592 },{ }}	        for (int l = 0; l < lines[f].size (); l += 1) {
#   [369] [ -1] {{ 185 277 369 426 593 },{ }}	          fprintf (stderr, "#   [%d] ", l);
#   [370] [ -1] {{ 186 278 370 427 594 },{ }}	          lines[f][l].Dump (stderr);
#   [371] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [372] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [373] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [374] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [375] [ -1] {{},{  19  22  31  38 }}	
#   [376] [ -1] {{ 376 },{ }}	  // Perform pass #4, in which we find any remaining matches amongst
#   [377] [ -1] {{ 377 },{ }}	  // the unique lines.  For every unique line that has more than 1
#   [378] [ -1] {{ 378 },{ }}	  // copy in both files, we declare the copies to match.
#   [379] [ -1] {{},{  19  22  31  38 }}	
#   [380] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [381] [ -1] {{ 381 },{ }}	    fprintf (stderr, "# Pass 4 (finding remaining matches amongst unique lines)...");
#   [382] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [383] [ -1] {{},{  19  22  31  38 }}	
#   [384] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [385] [ -1] {{},{  19  22  31  38 }}	
#   [386] [ -1] {{ 142 386 },{ }}	  for (MapStringToLinePtr::iterator i = table.begin (); i != table.end (); i++) {
#   [387] [ -1] {{ 143 387 },{  53 }}	    Line *l = i->second;
#   [388] [ -1] {{},{  19  22  31  38 }}	
#   [389] [ -1] {{ 389 },{ }}	    // If there's more than 1 matching old and new lines, then we
#   [390] [ -1] {{ 390 },{ }}	    // declare that each pair are (all) the same line.
#   [391] [ -1] {{},{  19  22  31  38 }}	
#   [392] [ -1] {{ 149 392 },{ }}	    // (In the original algorithm, we only recognized a match, here,
#   [393] [ -1] {{ 150 393 },{ }}	    // if there was exactly 1 copy for each file.)
#   [394] [ -1] {{},{  19  22  31  38 }}	
#   [395] [ -1] {{ 395 },{ }}	    while (0 < l->copies[0].size () && 0 < l->copies[1].size ()) {
#   [396] [ -1] {{ 153 256 348 396 },{ }}	      nMatchedLines += 1;
#   [397] [ -1] {{},{  19  22  31  38 }}	
#   [398] [ -1] {{ 155 398 },{ }}	      // For each matched line in the new file, mark it with the
#   [399] [ -1] {{ 156 399 },{ }}	      // corresponding line (number) in the old file.
#   [400] [ -1] {{},{  19  22  31  38 }}	
#   [401] [ -1] {{ 401 },{ }}	      unsigned o = l->copies[0].front ();
#   [402] [ -1] {{ 402 },{ }}	      unsigned n = l->copies[1].front ();
#   [403] [ -1] {{},{  19  22  31  38 }}	
#   [404] [ -1] {{ 237 329 404 },{ }}	      // Match up the pair.
#   [405] [ -1] {{},{  19  22  31  38 }}	
#   [406] [ -1] {{ 239 331 406 },{ }}	      lines[0][o].l = n;
#   [407] [ -1] {{ 240 332 407 },{ }}	      lines[1][n].l = o;
#   [408] [ -1] {{},{  19  22  31  38 }}	
#   [409] [ -1] {{ 409 },{ }}	      // Remove the matched line numbers from the lists.
#   [410] [ -1] {{},{  19  22  31  38 }}	
#   [411] [ -1] {{ 411 },{ }}	      l->copies[0].pop_front ();
#   [412] [ -1] {{ 412 },{ }}	      l->copies[1].pop_front ();
#   [413] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [414] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [415] [ -1] {{ 174 260 352 415 },{ }}	  nTotalMatchedLines += nMatchedLines;
#   [416] [ -1] {{},{  19  22  31  38 }}	
#   [417] [ -1] {{ 176 263 354 417 578 },{ }}	  // Let's see the intermediate results.
#   [418] [ -1] {{},{  19  22  31  38 }}	
#   [419] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [420] [ -1] {{ 179 420 },{ }}	    fprintf (stderr, " found %u matched lines (%u total).\n", nMatchedLines, nTotalMatchedLines);
#   [421] [ -1] {{},{  19  22  31  38 }}	
#   [422] [ -1] {{ 181 273 365 422 589 },{ }}	    if (1 < optVerbose) {
#   [423] [ -1] {{ 182 274 366 423 590 },{ }}	      for (int f = 0; f < 2; f += 1) {
#   [424] [ -1] {{ 183 275 367 424 591 },{ }}	        fprintf (stderr, "# file #%d\n", f + 1);
#   [425] [ -1] {{ 184 276 368 425 592 },{ }}	        for (int l = 0; l < lines[f].size (); l += 1) {
#   [426] [ -1] {{ 185 277 369 426 593 },{ }}	          fprintf (stderr, "#   [%d] ", l);
#   [427] [ -1] {{ 186 278 370 427 594 },{ }}	          lines[f][l].Dump (stderr);
#   [428] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [429] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [430] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [431] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [432] [ -1] {{},{  19  22  31  38 }}	
#   [433] [ -1] {{ 433 },{ }}	  // Perform Pass #5, in which we look for blocks which match, but are
#   [434] [ -1] {{ 434 },{ }}	  // the result of a move (their not in their original position).  For
#   [435] [ -1] {{ 435 },{ }}	  // these, we'll unmatch the blocks, turning them into a delete and
#   [436] [ -1] {{ 436 },{ }}	  // an insert.
#   [437] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [438] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [439] [ -1] {{ 439 },{ }}	    fprintf (stderr, "# Pass #5 (unmatching block moves)...\n");
#   [440] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [441] [ -1] {{},{  19  22  31  38 }}	
#   [442] [ -1] {{ 199 291 442 },{ }}	  nMatchedBlocks = 0;
#   [443] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [444] [ -1] {{},{  19  22  31  38 }}	
#   [445] [ -1] {{ 445 621 },{ }}	  // Starting at the top of both files,...
#   [446] [ -1] {{},{  19  22  31  38 }}	
#   [447] [ -1] {{ 447 },{ }}	  unsigned o = 0;
#   [448] [ -1] {{ 448 },{ }}	  unsigned n = 0;
#   [449] [ -1] {{},{  19  22  31  38 }}	
#   [450] [ -1] {{ 450 626 },{ }}	  while (o < lines[0].size () || n < lines[1].size ()) {
#   [451] [ -1] {{},{  19  22  31  38 }}	
#   [452] [ -1] {{ 452 },{ }}	    // Skip any unmatched lines at this point in the old file.  These
#   [453] [ -1] {{ 453 629 },{ }}	    // are deletes.
#   [454] [ -1] {{},{  19  22  31  38 }}	
#   [455] [ -1] {{ 455 538 },{ }}	    //    Old     New
#   [456] [ -1] {{ 456 },{ }}	    //   +---+
#   [457] [ -1] {{ 457 },{ }}	    // 0 | a |
#   [458] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [459] [ -1] {{ 459 },{ }}	    //         0 | b |
#   [460] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [461] [ -1] {{ 461 },{ }}	    // 1 | c | 1 | c |
#   [462] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [463] [ -1] {{ 463 },{ }}	    //         2 | z |
#   [464] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [465] [ -1] {{ 465 },{ }}	    // 2 | d | 3 | d |
#   [466] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [467] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [468] [ -1] {{ 468 },{ }}	    while (o < lines[0].size () && lines[0][o].l == ~0) {
#   [469] [ -1] {{ 219 469 494 },{ }}	      o += 1;
#   [470] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [471] [ -1] {{},{  19  22  31  38 }}	
#   [472] [ -1] {{ 472 },{ }}	    // Skip any unmatched lines at this point in the new file.  These
#   [473] [ -1] {{ 473 639 },{ }}	    // are inserts.
#   [474] [ -1] {{},{  19  22  31  38 }}	
#   [475] [ -1] {{ 475 },{ }}	    while (n < lines[1].size () && lines[1][n].l == ~0) {
#   [476] [ -1] {{ 476 495 },{ }}	      n += 1;
#   [477] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [478] [ -1] {{},{  19  22  31  38 }}	
#   [479] [ -1] {{ 479 },{ }}	    // When we get here, we know that we're dealing with matching
#   [480] [ -1] {{ 480 },{ }}	    // lines (or the end of one or both files).  We're done with this
#   [481] [ -1] {{ 481 },{ }}	    // pass, if we've reached the end of either file.
#   [482] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [483] [ -1] {{ 483 },{ }}	    if (lines[0].size () <= o || lines[1].size () <= n) {
#   [484] [ -1] {{ 484 739 742 },{ }}	      break;
#   [485] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [486] [ -1] {{},{  19  22  31  38 }}	
#   [487] [ -1] {{ 487 },{ }}	    // We now know that we've got a pair of matching lines, the start
#   [488] [ -1] {{ 488 },{ }}	    // of a matching block.  If the new file's line number is what we
#   [489] [ -1] {{ 489 },{ }}	    // expect, then the matched pair is unmoved, and we can skip over
#   [490] [ -1] {{ 490 },{ }}	    // the pair.  (If this is really the start of a block of more than
#   [491] [ -1] {{ 491 },{ }}	    // 1 lines, we'll handle it one pair at a time.)
#   [492] [ -1] {{},{  19  22  31  38 }}	
#   [493] [ -1] {{ 493 },{ }}	    if (lines[0][o].l == n) {
#   [494] [ -1] {{ 219 469 494 },{ }}	      o += 1;
#   [495] [ -1] {{ 476 495 },{ }}	      n += 1;
#   [496] [ -1] {{ 209 301 496 },{ }}	      continue;
#   [497] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [498] [ -1] {{},{  19  22  31  38 }}	
#   [499] [ -1] {{ 499 },{ }}	    // If, on the other hand, we don't expect this [new] line number,
#   [500] [ -1] {{ 500 },{ }}	    // then this matching block has been moved.  We need to turn the
#   [501] [ -1] {{ 501 },{ }}	    // matched pair into an *unmatched* pair, one of deletes, and one
#   [502] [ -1] {{ 502 },{ }}	    // of inserts.  First, though, we need to know how big this block
#   [503] [ -1] {{ 503 },{ }}	    // is, and how far it was moved....
#   [504] [ -1] {{},{  19  22  31  38 }}	
#   [505] [ -1] {{ 505 },{ }}	    // Remember where we were when we started.
#   [506] [ -1] {{},{  19  22  31  38 }}	
#   [507] [ -1] {{ 507 },{ }}	    unsigned oOld = o;
#   [508] [ -1] {{ 508 },{ }}	    unsigned nOld = n;
#   [509] [ -1] {{},{  19  22  31  38 }}	
#   [510] [ -1] {{ 510 },{ }}	    // Remember where the block came from.
#   [511] [ -1] {{},{  19  22  31  38 }}	
#   [512] [ -1] {{ 512 },{ }}	    unsigned nNew = lines[0][o].l;
#   [513] [ -1] {{},{  19  22  31  38 }}	
#   [514] [ -1] {{ 514 },{ }}	    // Find the end of this matched pair.
#   [515] [ -1] {{},{  19  22  31  38 }}	
#   [516] [ -1] {{ 516 },{ }}	    for (n = nNew; o < lines[0].size () && n < lines[1].size (); o += 1, n += 1) {
#   [517] [ -1] {{ 517 },{ }}	      if (lines[0][o].l != n) {
#   [518] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [519] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [520] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [521] [ -1] {{},{  19  22  31  38 }}	
#   [522] [ -1] {{ 522 },{ }}	    // When we get here:
#   [523] [ -1] {{ 523 },{ }}	    // * oOld..o is the old file's block,
#   [524] [ -1] {{ 524 },{ }}	    // * nNew..n is the new file's *moved* block, and
#   [525] [ -1] {{ 525 },{ }}	    // * nOld is where we originally expected the new block from.
#   [526] [ -1] {{ 526 },{ }}	 
#   [527] [ -1] {{ 527 },{ }}	    // We can now calculate the length of the block...
#   [528] [ -1] {{ 528 },{ }}	    
#   [529] [ -1] {{ 529 },{ }}	    unsigned bSize = o - oOld;  // (or n - nNew)
#   [530] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [531] [ -1] {{ 531 },{ }}	    // ... and we can calculate how far the block moved:
#   [532] [ -1] {{},{  19  22  31  38 }}	
#   [533] [ -1] {{ 533 },{ }}	    unsigned bMove = nOld < nNew ? nNew - nOld : nOld - nNew;
#   [534] [ -1] {{},{  19  22  31  38 }}	
#   [535] [ -1] {{ 535 },{ }}	    // The larger of the two will become our delete, and the smaller
#   [536] [ -1] {{ 536 },{ }}	    // will become our insert.
#   [537] [ -1] {{},{  19  22  31  38 }}	
#   [538] [ -1] {{ 455 538 },{ }}	    //    Old     New
#   [539] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [540] [ -1] {{ 540 },{ }}	    // 0 | a | 0 | b |
#   [541] [ -1] {{ 541 },{ }}	    //   +---+ 1 | b |
#   [542] [ -1] {{ 542 },{ }}	    // 1 | b |   +---+
#   [543] [ -1] {{ 543 },{ }}	    // 2 | b | 2 | a |
#   [544] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [545] [ -1] {{ 545 },{ }}	    // 3 | c | 3 | c |
#   [546] [ -1] {{ 458 460 462 464 466 539 544 546 },{ }}	    //   +---+   +---+
#   [547] [ -1] {{},{  19  22  31  38 }}	
#   [548] [ -1] {{ 548 },{ }}	    // (1) Delete a@0, insert a@2, or
#   [549] [ -1] {{ 549 },{ }}	    // (2) insert bb@0, delete bb@1?
#   [550] [ -1] {{},{  19  22  31  38 }}	
#   [551] [ -1] {{ 551 },{ }}	    // In (1), bSize (of a) is 1-0 or 1, the size of a@0, and bMove
#   [552] [ -1] {{ 552 },{ }}	    // (of a) is 2-0 or 2, the size of b@0.  We choose to delete a@0,
#   [553] [ -1] {{ 553 },{ }}	    // and reinsert a@2.
#   [554] [ -1] {{},{  19  22  31  38 }}	
#   [555] [ -1] {{ 555 },{ }}	    // if (bSize <= bMove) {
#   [556] [ -1] {{ 556 },{ }}	      for (unsigned a = oOld; a < o; a += 1) {
#   [557] [ -1] {{ 557 },{ }}	        lines[0][a].l = ~0;
#   [558] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [559] [ -1] {{ 559 },{ }}	      for (unsigned d = nNew; d < n; d += 1) {
#   [560] [ -1] {{ 560 },{ }}	        lines[1][d].l = ~0;
#   [561] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [562] [ -1] {{ 562 },{ }}	    // } else {
#   [563] [ -1] {{ 563 },{ }}	      // for (unsigned a = oOld; a < o; a += 1) {
#   [564] [ -1] {{ 564 },{ }}	      //   lines[0][a].l = ~0;
#   [565] [ -1] {{ 565 568 },{ }}	      // }
#   [566] [ -1] {{ 566 },{ }}	      // for (unsigned d = nNew; d < n; d += 1) {
#   [567] [ -1] {{ 567 },{ }}	      //   lines[1][d].l = ~0;
#   [568] [ -1] {{ 565 568 },{ }}	      // }
#   [569] [ -1] {{ 569 },{ }}	    // }
#   [570] [ -1] {{},{  19  22  31  38 }}	
#   [571] [ -1] {{ 571 },{ }}	    // Continue from where we left off.
#   [572] [ -1] {{},{  19  22  31  38 }}	
#   [573] [ -1] {{ 573 },{ }}	    n = nOld;
#   [574] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [575] [ -1] {{ 575 },{ }}	  nTotalMatchedLines -= nMatchedLines;
#   [576] [ -1] {{ 576 },{ }}	  nTotalMatchedBlocks -= nMatchedBlocks;
#   [577] [ -1] {{},{  19  22  31  38 }}	
#   [578] [ -1] {{ 176 263 354 417 578 },{ }}	  // Let's see the intermediate results.
#   [579] [ -1] {{},{  19  22  31  38 }}	
#   [580] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [581] [ -1] {{ 266 357 581 },{ }}	    fprintf (stderr,
#   [582] [ -1] {{ 267 358 582 },{ }}	             " found %u/%u matched lines/blocks (%u/%u totals).\n",
#   [583] [ -1] {{ 268 359 583 },{ }}	             nMatchedLines,
#   [584] [ -1] {{ 269 360 584 },{ }}	             nMatchedBlocks,
#   [585] [ -1] {{ 270 361 585 },{ }}	             nTotalMatchedLines,
#   [586] [ -1] {{ 271 362 586 },{ }}	             nTotalMatchedBlocks
#   [587] [ -1] {{ 272 363 587 },{ }}	            );
#   [588] [ -1] {{},{  19  22  31  38 }}	
#   [589] [ -1] {{ 181 273 365 422 589 },{ }}	    if (1 < optVerbose) {
#   [590] [ -1] {{ 182 274 366 423 590 },{ }}	      for (int f = 0; f < 2; f += 1) {
#   [591] [ -1] {{ 183 275 367 424 591 },{ }}	        fprintf (stderr, "# file #%d\n", f + 1);
#   [592] [ -1] {{ 184 276 368 425 592 },{ }}	        for (int l = 0; l < lines[f].size (); l += 1) {
#   [593] [ -1] {{ 185 277 369 426 593 },{ }}	          fprintf (stderr, "#   [%d] ", l);
#   [594] [ -1] {{ 186 278 370 427 594 },{ }}	          lines[f][l].Dump (stderr);
#   [595] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [596] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [597] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [598] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [599] [ -1] {{},{  19  22  31  38 }}	
#   [600] [ -1] {{ 600 },{ }}	  // Perform Pass #6, in which we create the desired output.
#   [601] [ -1] {{},{  19  22  31  38 }}	
#   [602] [ -1] {{ 119 136 178 195 265 287 356 380 419 438 580 602 },{ }}	  if (0 < optVerbose) {
#   [603] [ -1] {{ 603 },{ }}	    fprintf (stderr, "# Pass #6 (walking the differences)...\n");
#   [604] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [605] [ -1] {{},{  19  22  31  38 }}	
#   [606] [ -1] {{ 140 200 292 384 443 606 },{ }}	  nMatchedLines = 0;
#   [607] [ -1] {{},{  19  22  31  38 }}	
#   [608] [ -1] {{ 608 },{ }}	  // Write the header.
#   [609] [ -1] {{},{  19  22  31  38 }}	
#   [610] [ -1] {{ 610 },{ }}	  switch (diffFormat) {
#   [611] [ -1] {{ 611 },{ }}	  case Default:
#   [612] [ -1] {{ 612 },{ }}	  case Normal:
#   [613] [ -1] {{ 613 618 },{ }}	    break;
#   [614] [ -1] {{ 614 },{ }}	  case Unified:
#   [615] [ -1] {{ 615 },{ }}	    fprintf (stdout, "--- %s\t%s\n", files[0], "0000-00-00 00:00:00.000000000 +0000");
#   [616] [ -1] {{ 616 },{ }}	    fprintf (stdout, "+++ %s\t%s\n", files[1], "0000-00-00 00:00:00.000000000 +0000");
#   [617] [ -1] {{ 617 },{ }}	    fprintf (stdout, "@@ -1,%d +1,%d @@\n", lines[0].size (), lines[1].size ());
#   [618] [ -1] {{ 613 618 },{ }}	    break;
#   [619] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [620] [ -1] {{},{  19  22  31  38 }}	
#   [621] [ -1] {{ 445 621 },{ }}	  // Starting at the top of both files,...
#   [622] [ -1] {{},{  19  22  31  38 }}	
#   [623] [ -1] {{ 623 },{ }}	  o = 0;
#   [624] [ -1] {{ 624 },{ }}	  n = 0;
#   [625] [ -1] {{},{  19  22  31  38 }}	
#   [626] [ -1] {{ 450 626 },{ }}	  while (o < lines[0].size () || n < lines[1].size ()) {
#   [627] [ -1] {{},{  19  22  31  38 }}	
#   [628] [ -1] {{ 628 },{ }}	    // Find any unmatched lines at this point in the old file.  These
#   [629] [ -1] {{ 453 629 },{ }}	    // are deletes.
#   [630] [ -1] {{},{  19  22  31  38 }}	
#   [631] [ -1] {{ 631 },{ }}	    unsigned boDeletes;
#   [632] [ -1] {{ 632 },{ }}	    for (boDeletes = o;
#   [633] [ -1] {{ 633 },{ }}	         o < lines[0].size () && lines[0][o].l == ~0;
#   [634] [ -1] {{ 634 },{ }}	         o += 1
#   [635] [ -1] {{ 635 645 },{ }}	        )
#   [636] [ -1] {{ 636 646 },{ }}	    {}
#   [637] [ -1] {{},{  19  22  31  38 }}	
#   [638] [ -1] {{ 638 },{ }}	    // Find any unmatched lines at this point in the new file.  These
#   [639] [ -1] {{ 473 639 },{ }}	    // are inserts.
#   [640] [ -1] {{},{  19  22  31  38 }}	
#   [641] [ -1] {{ 641 },{ }}	    unsigned boInserts;
#   [642] [ -1] {{ 642 },{ }}	    for (boInserts = n;
#   [643] [ -1] {{ 643 },{ }}	         n < lines[1].size () && lines[1][n].l == ~0;
#   [644] [ -1] {{ 644 },{ }}	         n += 1
#   [645] [ -1] {{ 635 645 },{ }}	        )
#   [646] [ -1] {{ 636 646 },{ }}	    {}
#   [647] [ -1] {{},{  19  22  31  38 }}	
#   [648] [ -1] {{ 648 },{ }}	    // We've got deleted line(s) from boDeletes .. o.
#   [649] [ -1] {{ 649 },{ }}	    // We've got deleted line(s) from boInserts .. n.
#   [650] [ -1] {{},{  19  22  31  38 }}	
#   [651] [ -1] {{ 651 },{ }}	    unsigned nDeletes = o - boDeletes;
#   [652] [ -1] {{ 652 },{ }}	    unsigned nInserts = n - boInserts;
#   [653] [ -1] {{},{  19  22  31  38 }}	
#   [654] [ -1] {{ 654 },{ }}	    // We've got...
#   [655] [ -1] {{  15  24  26  28  51  65  68  70  74  82  84  87  92  95 100 108 118 122 131 135 139 141 144 148 151 154 157 161 163 166 168 175 177 180 191 194 198 201 203 205 207 211 215 221 225 228 230 232 236 238 241 243 255 262 264 283 286 290 293 295 297 299 303 307 313 317 320 322 324 328 330 333 335 347 353 355 364 375 379 383 385 388 391 394 397 400 403 405 408 410 416 418 421 432 437 441 444 446 449 451 454 467 471 474 478 482 486 492 498 504 506 509 511 513 515 521 530 532 534 537 547 550 554 570 572 577 579 588 599 601 605 607 609 620 622 625 627 630 637 640 647 650 653 655 657 659 678 689 691 711 713 733 735 },{  19  22  31  38 }}	
#   [656] [ -1] {{ 656 },{ }}	    if (nDeletes && nInserts) {
#   [657] [ -1] {{},{  19  22  31  38 }}	
#   [658] [ -1] {{ 658 },{ }}	      // ... deletes and inserts.
#   [659] [ -1] {{},{  19  22  31  38 }}	
#   [660] [ -1] {{ 660 692 714 },{ }}	      switch (diffFormat) {
#   [661] [ -1] {{ 661 693 715 },{ }}	      case Default:
#   [662] [ -1] {{ 662 694 716 },{ }}	      case Normal:
#   [663] [ -1] {{ 663 },{ }}	        if (1 < nDeletes && 1 < nInserts) {
#   [664] [ -1] {{ 664 },{ }}	          fprintf (stdout, "%d,%dc%d,%d\n", boDeletes + 1, o, boInserts + 1, n);
#   [665] [ -1] {{ 665 },{ }}	        } else if (1 < nDeletes) {
#   [666] [ -1] {{ 666 },{ }}	          fprintf (stdout, "%d,%dc%d\n", boDeletes + 1, o, boInserts + 1);
#   [667] [ -1] {{ 667 },{ }}	        } else if (1 < nInserts) {
#   [668] [ -1] {{ 668 },{ }}	          fprintf (stdout, "%dc%d,%d\n", boDeletes + 1, boInserts + 1, n);
#   [669] [ -1] {{ 669 },{ }}	        } 
#   [670] [ -1] {{ 670 680 700 705 },{ }}	        for (unsigned l = boDeletes; l < o; l += 1) {
#   [671] [ -1] {{ 671 701 },{ }}	          fprintf (stdout, "< %s", lines[0][l].line->c_str ());
#   [672] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [673] [ -1] {{ 673 },{ }}	        fprintf (stderr, "---\n");
#   [674] [ -1] {{ 674 683 722 727 },{ }}	        for (unsigned l = boInserts; l < n; l += 1) {
#   [675] [ -1] {{ 675 723 },{ }}	          fprintf (stdout, "> %s", lines[1][l].line->c_str ());
#   [676] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [677] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [678] [ -1] {{},{  19  22  31  38 }}	
#   [679] [ -1] {{ 679 704 726 },{ }}	      case Unified:
#   [680] [ -1] {{ 670 680 700 705 },{ }}	        for (unsigned l = boDeletes; l < o; l += 1) {
#   [681] [ -1] {{ 681 706 },{ }}	          fprintf (stdout, "-%s", lines[0][l].line->c_str ());
#   [682] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [683] [ -1] {{ 674 683 722 727 },{ }}	        for (unsigned l = boInserts; l < n; l += 1) {
#   [684] [ -1] {{ 684 728 },{ }}	          fprintf (stdout, "+%s", lines[1][l].line->c_str ());
#   [685] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [686] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [687] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [688] [ -1] {{ 688 },{ }}	    } else if (nDeletes) {
#   [689] [ -1] {{},{  19  22  31  38 }}	
#   [690] [ -1] {{ 690 },{ }}	      //  ... just deletes.
#   [691] [ -1] {{},{  19  22  31  38 }}	
#   [692] [ -1] {{ 660 692 714 },{ }}	      switch (diffFormat) {
#   [693] [ -1] {{ 661 693 715 },{ }}	      case Default:
#   [694] [ -1] {{ 662 694 716 },{ }}	      case Normal:
#   [695] [ -1] {{ 695 },{ }}	        if (1 < nDeletes) {
#   [696] [ -1] {{ 696 },{ }}	          fprintf (stdout, "%d,%dd%d\n", boDeletes + 1, o, n);
#   [697] [ -1] {{ 697 719 },{ }}	        } else {
#   [698] [ -1] {{ 698 },{ }}	          fprintf (stdout, "%dd%d\n", boDeletes + 1, n);
#   [699] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [700] [ -1] {{ 670 680 700 705 },{ }}	        for (unsigned l = boDeletes; l < o; l += 1) {
#   [701] [ -1] {{ 671 701 },{ }}	          fprintf (stdout, "< %s", lines[0][l].line->c_str ());
#   [702] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [703] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [704] [ -1] {{ 679 704 726 },{ }}	      case Unified:
#   [705] [ -1] {{ 670 680 700 705 },{ }}	        for (unsigned l = boDeletes; l < o; l += 1) {
#   [706] [ -1] {{ 681 706 },{ }}	          fprintf (stdout, "-%s", lines[0][l].line->c_str ());
#   [707] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [708] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [709] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [710] [ -1] {{ 710 },{ }}	    } else if (nInserts) {
#   [711] [ -1] {{},{  19  22  31  38 }}	
#   [712] [ -1] {{ 712 },{ }}	      //  ... just inserts.
#   [713] [ -1] {{},{  19  22  31  38 }}	
#   [714] [ -1] {{ 660 692 714 },{ }}	      switch (diffFormat) {
#   [715] [ -1] {{ 661 693 715 },{ }}	      case Default:
#   [716] [ -1] {{ 662 694 716 },{ }}	      case Normal:
#   [717] [ -1] {{ 717 },{ }}	        if (1 < nInserts) {
#   [718] [ -1] {{ 718 },{ }}	          fprintf (stdout, "%da%d,%d\n", o, boInserts + 1, n);
#   [719] [ -1] {{ 697 719 },{ }}	        } else {
#   [720] [ -1] {{ 720 },{ }}	          fprintf (stdout, "%da%d\n", o, boInserts + 1);
#   [721] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [722] [ -1] {{ 674 683 722 727 },{ }}	        for (unsigned l = boInserts; l < n; l += 1) {
#   [723] [ -1] {{ 675 723 },{ }}	          fprintf (stdout, "> %s", lines[1][l].line->c_str ());
#   [724] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [725] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [726] [ -1] {{ 679 704 726 },{ }}	      case Unified:
#   [727] [ -1] {{ 674 683 722 727 },{ }}	        for (unsigned l = boInserts; l < n; l += 1) {
#   [728] [ -1] {{ 684 728 },{ }}	          fprintf (stdout, "+%s", lines[1][l].line->c_str ());
#   [729] [ -1] {{ 104 187 279 371 428 595 672 676 682 685 699 702 707 721 724 729 },{  41 }}	        }
#   [730] [ -1] {{ 234 326 518 677 686 703 708 725 730 },{ }}	        break;
#   [731] [ -1] {{  91 107 111 171 188 235 249 254 280 327 341 346 372 429 519 558 561 596 687 709 731 },{  44 }}	      }
#   [732] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [733] [ -1] {{},{  19  22  31  38 }}	
#   [734] [ -1] {{ 734 },{ }}	    // When we get here, we're dealing with matching lines.
#   [735] [ -1] {{},{  19  22  31  38 }}	
#   [736] [ -1] {{ 736 },{ }}	    switch (diffFormat) {
#   [737] [ -1] {{ 737 },{ }}	    case Default:
#   [738] [ -1] {{ 738 },{ }}	    case Normal:
#   [739] [ -1] {{ 484 739 742 },{ }}	      break;
#   [740] [ -1] {{ 740 },{ }}	    case Unified:
#   [741] [ -1] {{ 741 },{ }}	      fprintf (stdout, " %s", lines[0][o].line->c_str ());
#   [742] [ -1] {{ 484 739 742 },{ }}	      break;
#   [743] [ -1] {{  42  46 116 172 189 210 257 281 302 349 373 413 430 470 477 485 497 520 597 732 743 },{  48  63 }}	    }
#   [744] [ -1] {{ 744 },{ }}	    o += 1;
#   [745] [ -1] {{ 745 },{ }}	    n += 1;
#   [746] [ -1] {{  33  37  48  57  61 117 121 138 173 190 197 259 282 289 351 374 382 414 431 440 574 598 604 619 746 },{  15  49  55  58  64 }}	  }
#   [747] [ 65] {{ },{ }}	}
#   [748] [ 66] {{ },{ }}	<eof>
#       [ 66] [748] {{ },{ }}	<eof>
#   [749]?[  0] {{ 
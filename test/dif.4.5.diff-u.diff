--- dif.4.cpp	2008-02-25 18:06:37.000000000 +0000
+++ dif.5.cpp	2008-02-25 19:19:42.000000000 +0000
@@ -22,7 +22,8 @@
   Unified
 };
 
-DiffFormat diffFormat = Unified;
+DiffFormat diffFormat = Context;
+unsigned optCopyContext = 3;
 
 int optVerbose = 1;
 
@@ -66,20 +67,38 @@
 typedef map<string, Line *> MapStringToLinePtr;
 typedef vector<LinePtr> VectorLinePtr;
 
-char *ARGV0 = "dif2";
+// Our name.
 
-int main (int argc, char *argv[])
-{
-  char const *files[2] = { 0, 0 };
+char *ARGV0 = "dif3";
+
+// The 'symbol' (line) table.
+
+MapStringToLinePtr table;
+
+// The names of the 2 files to be diff'd.
+
+char const *files[2] = { 0, 0 };
+
+// The lines of the 2 files to be diff'd.
+
+VectorLinePtr lines[2];
 
-  MapStringToLinePtr table;
-  VectorLinePtr lines[2];
+// Miscellaneous metrics.
 
-  unsigned nTotalMatchedBlocks = 0;
-  unsigned nMatchedBlocks = 0;
-  unsigned nTotalMatchedLines = 0;
-  unsigned nMatchedLines = 0;
+unsigned nTotalMatchedBlocks = 0;
+unsigned nMatchedBlocks = 0;
+unsigned nTotalMatchedLines = 0;
+unsigned nMatchedLines = 0;
 
+void pass1 ();
+void pass2 ();
+void pass3 ();
+void pass4 ();
+void pass5 ();
+void pass6 ();
+
+int main (int argc, char *argv[])
+{
   // Read the old [0] file, and the new [1] file.
 
   for (int a = 1, n = 0; a < argc && n < 2; a += 1, n += 1) {
@@ -117,7 +136,7 @@
   }
 
   if (0 < optVerbose) {
-    printf ("# Total unique lines = %d\n", table.size ());
+    fprintf (stderr, "# Total unique lines = %d\n", table.size ());
   }
 
   // map<int, int> counts;
@@ -129,10 +148,22 @@
   //   fprintf (stderr, "# counts[%d] = %d\n", i->first, i->second);
   // }
 
-  // Perform pass #1, in which we find all explicit matches amongst
-  // the unique lines.  For every unique line that appears the same
-  // number of times in both files, we declare the lines to match.
+  pass1 ();
+  pass2 ();
+  pass3 ();
+  pass4 ();
+  pass5 ();
+  pass6 ();
 
+  return 0;
+}
+
+// Perform pass #1, in which we find all explicit matches amongst the
+// unique lines.  For every unique line that appears the same number
+// of times in both files, we declare the lines to match.
+
+void pass1 ()
+{
   if (0 < optVerbose) {
     fprintf (stderr, "# Pass 1 (finding matches amongst unique lines)...");
   }
@@ -188,10 +219,13 @@
       }
     }
   }
+}
 
-  // Perform Pass #2, in which we attempt to 'widen' blocks of matched
-  // lines, by appending lines which are the same in both files.
+// Perform Pass #2, in which we attempt to 'widen' blocks of matched
+// lines, by appending lines which are the same in both files.
 
+void pass2 ()
+{
   if (0 < optVerbose) {
     fprintf (stderr, "# Pass #2 (spreading matches down)...");
   }
@@ -280,10 +314,13 @@
       }
     }
   }
+}
 
-  // Perform Pass #3, in which we attempt to 'widen' blocks of matched
-  // lines, by prepending lines which are the same in both files.
+// Perform Pass #3, in which we attempt to 'widen' blocks of matched
+// lines, by prepending lines which are the same in both files.
 
+void pass3 ()
+{
   if (0 < optVerbose) {
     fprintf (stderr, "# Pass #3 (spreading matches up)...");
   }
@@ -372,11 +409,14 @@
       }
     }
   }
+}
 
-  // Perform pass #4, in which we find any remaining matches amongst
-  // the unique lines.  For every unique line that has more than 1
-  // copy in both files, we declare the copies to match.
+// Perform pass #4, in which we find any remaining matches amongst the
+// unique lines.  For every unique line that has more than 1 copy in
+// both files, we declare the copies to match.
 
+void pass4 ()
+{
   if (0 < optVerbose) {
     fprintf (stderr, "# Pass 4 (finding remaining matches amongst unique lines)...");
   }
@@ -429,12 +469,15 @@
       }
     }
   }
+}
 
-  // Perform Pass #5, in which we look for blocks which match, but are
-  // the result of a move (their not in their original position).  For
-  // these, we'll unmatch the blocks, turning them into a delete and
-  // an insert.
+// Perform Pass #5, in which we look for blocks which match, but are
+// the result of a move (their not in their original position).  For
+// these, we'll unmatch the blocks, turning them into a delete and an
+// insert.
 
+void pass5 ()
+{
   if (0 < optVerbose) {
     fprintf (stderr, "# Pass #5 (unmatching block moves)...\n");
   }
@@ -596,32 +639,87 @@
       }
     }
   }
+}
 
-  // Perform Pass #6, in which we create the desired output.
+// Perform Pass #6, in which we create the desired output.
 
-  if (0 < optVerbose) {
-    fprintf (stderr, "# Pass #6 (walking the differences)...\n");
-  }
+void pass6c ();
+void pass6e ();
+void pass6i ();
+void pass6n ();
+void pass6r ();
+void pass6s ();
+void pass6u ();
 
-  nMatchedLines = 0;
-
-  // Write the header.
+void pass6 ()
+{
 
   switch (diffFormat) {
-  case Default:
+  case Context:
+    pass6c ();
+    break;
+
+  case EdScript:
+    pass6e ();
+    break;
+
+  case IfThenElse:
+    pass6i ();
+    break;
+
   case Normal:
+    pass6n ();
     break;
+
+  case RCS:
+    pass6r ();
+    break;
+
+  case SideBySide:
+    pass6s ();
+    break;
+
   case Unified:
-    fprintf (stdout, "--- %s\t%s\n", files[0], "0000-00-00 00:00:00.000000000 +0000");
-    fprintf (stdout, "+++ %s\t%s\n", files[1], "0000-00-00 00:00:00.000000000 +0000");
-    fprintf (stdout, "@@ -1,%d +1,%d @@\n", lines[0].size (), lines[1].size ());
+    pass6u ();
+    break;
+
+  case Default:
+  default:
+    pass6c ();
     break;
   }
+}
+
+template<typename T> T min (T l, T r) {
+  if (l < r) {
+    return l;
+  }
+  return r;
+}
+
+template<typename T> T max (T l, T r) {
+  if (l < r) {
+    return r;
+  }
+  return l;
+}
+
+void pass6c () {
+  if (0 < optVerbose) {
+    fprintf (stderr, "# Pass #6u (walking the differences)...\n");
+  }
+
+  nMatchedLines = 0;
+
+  // Write the header.
+
+  fprintf (stdout, "*** %s\t%s\n", files[0], "0000-00-00 00:00:00.000000000 +0000");
+  fprintf (stdout, "--- %s\t%s\n", files[1], "0000-00-00 00:00:00.000000000 +0000");
 
   // Starting at the top of both files,...
 
-  o = 0;
-  n = 0;
+  unsigned o = 0;
+  unsigned n = 0;
 
   while (o < lines[0].size () || n < lines[1].size ()) {
 
@@ -651,96 +749,262 @@
     unsigned nDeletes = o - boDeletes;
     unsigned nInserts = n - boInserts;
 
-    // We've got...
+    // Have we got anything?
 
-    if (nDeletes && nInserts) {
+    if (nDeletes || nInserts) {
+      int boOldWindow = max (0, int (boDeletes) - int(optCopyContext));
+      int eoOldWindow = min (int (lines[0].size ()), int(o) + int(optCopyContext));
 
-      // ... deletes and inserts.
+      int boNewWindow = max (0, int (boInserts) - int (optCopyContext));
+      int eoNewWindow = min (int (lines[1].size ()), int(n) + int (optCopyContext));
+
+      fprintf (stdout, "***************\n*** %d,%d ****", boOldWindow, eoOldWindow);
+      for (unsigned l = boOldWindow; l < boDeletes; l += 1) {
+        fprintf (stdout, "  %s", lines[0][l].line->c_str ());
+      }
+
+      // We've got...
+
+      if (nDeletes && nInserts) {
+
+        // ... deletes and inserts.
 
-      switch (diffFormat) {
-      case Default:
-      case Normal:
-        if (1 < nDeletes && 1 < nInserts) {
-          fprintf (stdout, "%d,%dc%d,%d\n", boDeletes + 1, o, boInserts + 1, n);
-        } else if (1 < nDeletes) {
-          fprintf (stdout, "%d,%dc%d\n", boDeletes + 1, o, boInserts + 1);
-        } else if (1 < nInserts) {
-          fprintf (stdout, "%dc%d,%d\n", boDeletes + 1, boInserts + 1, n);
-        } 
         for (unsigned l = boDeletes; l < o; l += 1) {
-          fprintf (stdout, "< %s", lines[0][l].line->c_str ());
-        }
-        fprintf (stderr, "---\n");
-        for (unsigned l = boInserts; l < n; l += 1) {
-          fprintf (stdout, "> %s", lines[1][l].line->c_str ());
+          fprintf (stdout, "! %s", lines[0][l].line->c_str ());
         }
-        break;
+      } else if (nDeletes) {
+
+        //  ... just deletes.
 
-      case Unified:
         for (unsigned l = boDeletes; l < o; l += 1) {
-          fprintf (stdout, "-%s", lines[0][l].line->c_str ());
+          fprintf (stdout, "- %s", lines[0][l].line->c_str ());
+        }
+      }
+
+      for (unsigned l = o; l < eoOldWindow; l += 1) {
+        fprintf (stdout, "  %s", lines[0][l].line->c_str ());
+      }
+      fprintf (stdout, "--- %d,%d ----", boNewWindow, eoNewWindow);
+      for (unsigned l = boNewWindow; l < boInserts; l += 1) {
+        fprintf (stdout, "  %s", lines[1][l].line->c_str ());
+      }
+
+      // We've got...
+
+      if (nDeletes && nInserts) {
+
+        // ... deletes and inserts.
+
+        for (unsigned l = boInserts; l < n; l += 1) {
+          fprintf (stdout, "! %s", lines[1][l].line->c_str ());
         }
+      } else if (nInserts) {
+
+        //  ... just inserts.
+
         for (unsigned l = boInserts; l < n; l += 1) {
-          fprintf (stdout, "+%s", lines[1][l].line->c_str ());
+          fprintf (stdout, "+ %s", lines[1][l].line->c_str ());
         }
-        break;
+      }
+
+      for (unsigned l = n; l < eoNewWindow; l += 1) {
+        fprintf (stdout, "  %s", lines[1][l].line->c_str ());
+      }
+    }
+
+    // When we get here, we're dealing with matching lines.
+
+    o += 1;
+    n += 1;
+  }
+}
+
+void pass6e () {
+}
+
+void pass6i () {
+}
+
+void pass6n ()
+{
+  if (0 < optVerbose) {
+    fprintf (stderr, "# Pass #6n (walking the differences)...\n");
+  }
+
+  nMatchedLines = 0;
+
+  // Write the header.  (None for normal.)
+
+  // Starting at the top of both files,...
+
+  unsigned o = 0;
+  unsigned n = 0;
+
+  while (o < lines[0].size () || n < lines[1].size ()) {
+
+    // Find any unmatched lines at this point in the old file.  These
+    // are deletes.
+
+    unsigned boDeletes;
+    for (boDeletes = o;
+         o < lines[0].size () && lines[0][o].l == ~0;
+         o += 1
+        )
+    {}
+
+    // Find any unmatched lines at this point in the new file.  These
+    // are inserts.
+
+    unsigned boInserts;
+    for (boInserts = n;
+         n < lines[1].size () && lines[1][n].l == ~0;
+         n += 1
+        )
+    {}
+
+    // We've got deleted line(s) from boDeletes .. o.
+    // We've got deleted line(s) from boInserts .. n.
+
+    unsigned nDeletes = o - boDeletes;
+    unsigned nInserts = n - boInserts;
+
+    // We've got...
+
+    if (nDeletes && nInserts) {
+
+      // ... deletes and inserts.
+
+      if (1 < nDeletes && 1 < nInserts) {
+        fprintf (stdout, "%d,%dc%d,%d\n", boDeletes + 1, o, boInserts + 1, n);
+      } else if (1 < nDeletes) {
+        fprintf (stdout, "%d,%dc%d\n", boDeletes + 1, o, boInserts + 1);
+      } else if (1 < nInserts) {
+        fprintf (stdout, "%dc%d,%d\n", boDeletes + 1, boInserts + 1, n);
+      } 
+      for (unsigned l = boDeletes; l < o; l += 1) {
+        fprintf (stdout, "< %s", lines[0][l].line->c_str ());
+      }
+      fprintf (stderr, "---\n");
+      for (unsigned l = boInserts; l < n; l += 1) {
+        fprintf (stdout, "> %s", lines[1][l].line->c_str ());
       }
     } else if (nDeletes) {
 
       //  ... just deletes.
 
-      switch (diffFormat) {
-      case Default:
-      case Normal:
-        if (1 < nDeletes) {
-          fprintf (stdout, "%d,%dd%d\n", boDeletes + 1, o, n);
-        } else {
-          fprintf (stdout, "%dd%d\n", boDeletes + 1, n);
-        }
-        for (unsigned l = boDeletes; l < o; l += 1) {
-          fprintf (stdout, "< %s", lines[0][l].line->c_str ());
-        }
-        break;
-      case Unified:
-        for (unsigned l = boDeletes; l < o; l += 1) {
-          fprintf (stdout, "-%s", lines[0][l].line->c_str ());
-        }
-        break;
+      if (1 < nDeletes) {
+        fprintf (stdout, "%d,%dd%d\n", boDeletes + 1, o, n);
+      } else {
+        fprintf (stdout, "%dd%d\n", boDeletes + 1, n);
+      }
+      for (unsigned l = boDeletes; l < o; l += 1) {
+        fprintf (stdout, "< %s", lines[0][l].line->c_str ());
       }
     } else if (nInserts) {
 
       //  ... just inserts.
 
-      switch (diffFormat) {
-      case Default:
-      case Normal:
-        if (1 < nInserts) {
-          fprintf (stdout, "%da%d,%d\n", o, boInserts + 1, n);
-        } else {
-          fprintf (stdout, "%da%d\n", o, boInserts + 1);
-        }
-        for (unsigned l = boInserts; l < n; l += 1) {
-          fprintf (stdout, "> %s", lines[1][l].line->c_str ());
-        }
-        break;
-      case Unified:
-        for (unsigned l = boInserts; l < n; l += 1) {
-          fprintf (stdout, "+%s", lines[1][l].line->c_str ());
-        }
-        break;
+      if (1 < nInserts) {
+        fprintf (stdout, "%da%d,%d\n", o, boInserts + 1, n);
+      } else {
+        fprintf (stdout, "%da%d\n", o, boInserts + 1);
+      }
+      for (unsigned l = boInserts; l < n; l += 1) {
+        fprintf (stdout, "> %s", lines[1][l].line->c_str ());
       }
     }
 
     // When we get here, we're dealing with matching lines.
 
-    switch (diffFormat) {
-    case Default:
-    case Normal:
-      break;
-    case Unified:
-      fprintf (stdout, " %s", lines[0][o].line->c_str ());
-      break;
+    o += 1;
+    n += 1;
+  }
+}
+
+void pass6r () {
+}
+
+void pass6s () {
+}
+
+void pass6u ()
+{
+  if (0 < optVerbose) {
+    fprintf (stderr, "# Pass #6u (walking the differences)...\n");
+  }
+
+  nMatchedLines = 0;
+
+  // Write the header.
+
+  fprintf (stdout, "--- %s\t%s\n", files[0], "0000-00-00 00:00:00.000000000 +0000");
+  fprintf (stdout, "+++ %s\t%s\n", files[1], "0000-00-00 00:00:00.000000000 +0000");
+  fprintf (stdout, "@@ -1,%d +1,%d @@\n", lines[0].size (), lines[1].size ());
+
+  // Starting at the top of both files,...
+
+  unsigned o = 0;
+  unsigned n = 0;
+
+  while (o < lines[0].size () || n < lines[1].size ()) {
+
+    // Find any unmatched lines at this point in the old file.  These
+    // are deletes.
+
+    unsigned boDeletes;
+    for (boDeletes = o;
+         o < lines[0].size () && lines[0][o].l == ~0;
+         o += 1
+        )
+    {}
+
+    // Find any unmatched lines at this point in the new file.  These
+    // are inserts.
+
+    unsigned boInserts;
+    for (boInserts = n;
+         n < lines[1].size () && lines[1][n].l == ~0;
+         n += 1
+        )
+    {}
+
+    // We've got deleted line(s) from boDeletes .. o.
+    // We've got deleted line(s) from boInserts .. n.
+
+    unsigned nDeletes = o - boDeletes;
+    unsigned nInserts = n - boInserts;
+
+    // We've got...
+
+    if (nDeletes && nInserts) {
+
+      // ... deletes and inserts.
+
+      for (unsigned l = boDeletes; l < o; l += 1) {
+        fprintf (stdout, "-%s", lines[0][l].line->c_str ());
+      }
+      for (unsigned l = boInserts; l < n; l += 1) {
+        fprintf (stdout, "+%s", lines[1][l].line->c_str ());
+      }
+    } else if (nDeletes) {
+
+      //  ... just deletes.
+
+      for (unsigned l = boDeletes; l < o; l += 1) {
+        fprintf (stdout, "-%s", lines[0][l].line->c_str ());
+      }
+    } else if (nInserts) {
+
+      //  ... just inserts.
+
+      for (unsigned l = boInserts; l < n; l += 1) {
+        fprintf (stdout, "+%s", lines[1][l].line->c_str ());
+      }
     }
+
+    // When we get here, we're dealing with matching lines.
+
+    fprintf (stdout, " %s", lines[0][o].line->c_str ());
     o += 1;
     n += 1;
   }

#include <algorithm>                                            #include <algorithm>
using std::find;                                                using std::find;
#include <string>                                               #include <string>
using std::string;                                              using std::string;
#include <list>                                                 #include <list>
using std::list;                                                using std::list;
#include <map>                                                  #include <map>
using std::map;                                                 using std::map;
#include <vector>                                               #include <vector>
using std::vector;                                              using std::vector;
#include <stdio.h>                                              #include <stdio.h>
#include <getopt.h>                                           <
                                                                
enum DiffFormat {                                               enum DiffFormat {
  opt_D_IfThenElse,                                           |   Default,
  opt___Normal,                                               <
  opt_c_Context,                                              <
  opt_e_EdScript,                                             <
  opt_n_RCS,                                                  <
  opt_u_Unified,                                              <
  opt_y_SideBySide                                            <
};                                                            <
                                                              <
DiffFormat opt___OutputFormat = opt___Normal;                 <
                                                                
bool       opt_B_IgnoreBlankLines = false;                    |   Context,
unsigned   opt_C_LinesOfCopyContext = 3;                      |   EdScript,
string     opt_D_IfdefName;                                   |   IfThenElse,
bool       opt_E_IgnoreTabExpansionChanges = false;           |   Normal,
string     opt_F_ShowMostRecentLineMatching;                  |   RCS,
string     opt_I_IgnoreLinesMatching;                         |   SideBySide,
bool       opt_N_TreatAbsentFilesAsEmpty = false;             |   Unified
string     opt_S_StartWithFileMatching;                       | };
bool       opt_T_PrependATab = false;                         | 
unsigned   opt_U_LinesOfUnifiedContext = 3;                   | DiffFormat diffFormat = SideBySide;
unsigned   opt_W_MaxPrintColumns = 130;                       <
string     opt_X_ExcludeFilesMatching;                        <
bool       opt_a_TreatAllFilesAsText = false;                 <
bool       opt_b_IgnoreWhitespaceChanges = false;             <
bool       opt_d_TryToFindMinimalChanges = false;             <
bool       opt_i_IgnoreCaseDifferences = false;               <
bool       opt_l_PaginateWithPr = false;                      <
bool       opt_p_ShowChangedCFunction = false;                <
bool       opt_q_OutputOnlyIfFilesDiffer = false;             <
bool       opt_r_RecursivelyCompareSubdirectories = false;    <
bool       opt_s_ReportWhenFilesAreSame = false;              <
bool       opt_t_ExpandTabs = false;                          <
bool       opt_v_ShowVersionInfo = false;                     <
bool       opt_w_IgnoreAllWhitespace = false;                 <
string     opt_x_IgnoreFilesMatching;                         <
                                                                
                                                              > unsigned optCopyContext = 3;
                                                              > unsigned optPageWidth = 130;
unsigned optVerbose = 2;                                        unsigned optVerbose = 2;
                                                                
struct Line : public string {                                   struct Line : public string {
  Line (string _text) :                                           Line (string _text) :
    string (_text)                                                  string (_text)
  {                                                               {
  }                                                               }
  ~Line () {                                                      ~Line () {
    copies[0].erase (copies[0].begin (), copies[0].end ());         copies[0].erase (copies[0].begin (), copies[0].end ());
    copies[1].erase (copies[1].begin (), copies[1].end ());         copies[1].erase (copies[1].begin (), copies[1].end ());
  }                                                               }
  void Dump (FILE *out) {                                         void Dump (FILE *out) {
    fprintf (out, "{{ ");                                           fprintf (out, "{{ ");
    for (list<unsigned>::iterator i = copies[0].begin (); i !       for (list<unsigned>::iterator i = copies[0].begin (); i !
      fprintf (out, "%u ", *i);                                       fprintf (out, "%u ", *i);
    }                                                               }
    fprintf (out, "},{ ");                                          fprintf (out, "},{ ");
    for (list<unsigned>::iterator i = copies[1].begin (); i !       for (list<unsigned>::iterator i = copies[1].begin (); i !
      fprintf (out, "%u ", *i);                                       fprintf (out, "%u ", *i);
    }                                                               }
    fprintf (out, "}}\t%s\n", c_str ());                            fprintf (out, "}}\t%s\n", c_str ());
  }                                                               }
  list<unsigned> copies[2];                                       list<unsigned> copies[2];
};                                                              };
                                                                
struct LinePtr {                                                struct LinePtr {
  LinePtr (Line *_line) :                                         LinePtr (Line *_line) :
    line (_line),                                                   line (_line),
    l (~0u)                                                         l (~0u)
  {                                                               {
  }                                                               }
  void Dump (FILE *out) {                                         void Dump (FILE *out) {
    fprintf (out, "[%d] ", l);                                      fprintf (out, "[%d] ", l);
    line->Dump (out);                                               line->Dump (out);
  }                                                               }
  Line *line;                                                     Line *line;
  unsigned l;                                                     unsigned l;
};                                                              };
                                                                
typedef map<string, Line *> MapStringToLinePtr;                 typedef map<string, Line *> MapStringToLinePtr;
typedef vector<LinePtr> VectorLinePtr;                          typedef vector<LinePtr> VectorLinePtr;
                                                                
// Our name.                                                    // Our name.
                                                                
char *ARGV0 = "dif3";                                           char *ARGV0 = "dif3";
                                                                
// The 'symbol' (line) table.                                   // The 'symbol' (line) table.
                                                                
MapStringToLinePtr table;                                       MapStringToLinePtr table;
                                                                
// The names of the 2 files to be diff'd.                       // The names of the 2 files to be diff'd.
                                                                
char const *files[2] = { 0, 0 };               sdiff: sdiff.cpp:1858: void pass6y(): Assertion `lines[0][o].line == lines[1][n].line' failed.
                 char const *files[2] = { 0, 0 };
                                                                
// The lines of the 2 files to be diff'd.                       // The lines of the 2 files to be diff'd.
                                                                
VectorLinePtr lines[2];                                         VectorLinePtr lines[2];
                                                                
// Miscellaneous metrics.                                       // Miscellaneous metrics.
                                                                
unsigned nTotalMatchedBlocks = 0;                               unsigned nTotalMatchedBlocks = 0;
unsigned nMatchedBlocks = 0;                                    unsigned nMatchedBlocks = 0;
unsigned nTotalMatchedLines = 0;                                unsigned nTotalMatchedLines = 0;
unsigned nMatchedLines = 0;                                     unsigned nMatchedLines = 0;
                                                              > 
                                                              > void pass1 ();
                                                              > void pass2 ();
                                                              > void pass3 ();
                                                              > void pass4 ();
                                                              > void pass5 ();
                                                              > void pass6 ();
                                                              > 
                                                              > int main (int argc, char *argv[])

#include <algorithm>                                            #include <algorithm>
using std::find;                                                using std::find;
#include <string>                                               #include <string>
using std::string;                                              using std::string;
#include <list>                                                 #include <list>
using std::list;                                                using std::list;
#include <map>                                                  #include <map>
using std::map;                                                 using std::map;
#include <vector>                                               #include <vector>
using std::vector;                                              using std::vector;
#include <stdio.h>                                              #include <stdio.h>
                                                                
enum DiffFormat {                                               enum DiffFormat {
  Default,                                                        Default,
                                                                
  Context,                                                        Context,
  EdScript,                                                       EdScript,
  IfThenElse,                                                     IfThenElse,
  Normal,                                                         Normal,
  RCS,                                                            RCS,
  SideBySide,                                                     SideBySide,
  Unified                                                         Unified
};                                                              };
                                                                
DiffFormat diffFormat = Unified;                              | DiffFormat diffFormat = Context;
                                                              > unsigned optCopyContext = 3;
                                                                
int optVerbose = 1;                                             int optVerbose = 1;
                                                                
struct Line : public string {                                   struct Line : public string {
  Line (string _text) :                                           Line (string _text) :
    string (_text)                                                  string (_text)
  {                                                               {
  }                                                               }
  ~Line () {                                                      ~Line () {
    copies[0].erase (copies[0].begin (), copies[0].end ());         copies[0].erase (copies[0].begin (), copies[0].end ());
    copies[1].erase (copies[1].begin (), copies[1].end ());         copies[1].erase (copies[1].begin (), copies[1].end ());
  }                                                               }
  void Dump (FILE *out) {                                         void Dump (FILE *out) {
    fprintf (out, "{{ ");                                           fprintf (out, "{{ ");
    for (list<unsigned>::iterator i = copies[0].begin (); i !       for (list<unsigned>::iterator i = copies[0].begin (); i !
      fprintf (out, "%u ", *i);                                       fprintf (out, "%u ", *i);
    }                                                               }
    fprintf (out, "},{ ");                                          fprintf (out, "},{ ");
    for (list<unsigned>::iterator i = copies[1].begin (); i !       for (list<unsigned>::iterator i = copies[1].begin (); i !
      fprintf (out, "%u ", *i);                                       fprintf (out, "%u ", *i);
    }                                                               }
    fprintf (out, "}}\t%s", c_str ());                              fprintf (out, "}}\t%s", c_str ());
  }                                                               }
  list<unsigned> copies[2];                                       list<unsigned> copies[2];
};                                                              };
                                                                
struct LinePtr {                                                struct LinePtr {
  LinePtr (Line *_line) :                                         LinePtr (Line *_line) :
    line (_line),                                                   line (_line),
    l (~0u)                                                         l (~0u)
  {                                                               {
  }                                                               }
  void Dump (FILE *out) {                                         void Dump (FILE *out) {
    fprintf (out, "[%d] ", l);                                      fprintf (out, "[%d] ", l);
    line->Dump (out);                                               line->Dump (out);
  }                                                               }
  Line *line;                                                     Line *line;
  unsigned l;                                                     unsigned l;
};                                                              };
                                                                
typedef map<string, Line *> MapStringToLinePtr;                 typedef map<string, Line *> MapStringToLinePtr;
typedef vector<LinePtr> VectorLinePtr;                          typedef vector<LinePtr> VectorLinePtr;
                                                                
char *ARGV0 = "dif2";                                         | // Our name.
                                                              <
int main (int argc, char *argv[])                             <
{                                                             <
  char const *files[2] = { 0, 0 };                            <
                                                                
  MapStringToLinePtr table;                                   | char *ARGV0 = "dif3";
  VectorLinePtr lines[2];                                     <
                                                                
  unsigned nTotalMatchedBlocks = 0;                           | // The 'symbol' (line) table.
  unsigned nMatchedBlocks = 0;                                <
  unsigned nTotalMatchedLines = 0;                            <
  unsigned nMatchedLines = 0;                                 <
                                                                
  // Read the old [0] file, and the new [1] file.             | MapStringToLinePtr table;
                                                              <
  for (int a = 1, n = 0; a < argc && n < 2; a += 1, n += 1) { <
    files[n] = argv[a];                                       <
                                                              <
    if (FILE *f = fopen (files[n], "r")) {                    <
      if (0 < optVerbose) {                                   <
        fprintf (stderr, "# Reading %s...", files[n]);        <
      }                                                       <
                                                              <
      char buffer[1024];                                      <
      unsigned nUniq = 0;                                     <
                                                              <
      while (fgets (buffer, sizeof (buffer), f)) {            <
        string text (buffer);                                 <
                                                              <
        Line *line = table[text];                             <
                                                              <
        if (!line) {                                          <
          table[text] = line = new Line (text);               <
          nUniq += 1;                                         <
        }                                                     <
        line->copies[n].push_back (lines[n].size ());         <
        lines[n].push_back (line);                            <
      }                                                       <
                                                              <
      if (0 < optVerbose) {                                   <
        fprintf (stderr, " %u lines, %u unique.\n", lines[n]. <
      }                                                       <
    } else {                                                  <
      fprintf (stderr, "%s: Unable to open %s!  Exiting....\n <
      perror (ARGV0);                                         <
      exit (1);                                               <
    }                                                         <
  }                                                           <
                                                              <
  if (0 < optVerbose) {                                       <
    printf ("# Total unique lines = %d\n", table.size ());    <
  }                                                           <
                                                              <
  // map<int, int> counts;                                    <
  // for (MapStringToLinePtr::iterator i = table.begin (); i  <
  //   Line *l = i->second;                                   <
  //   counts[l->counts[0].size () + l->counts[1].size ()] += <
  // }                                                        <
  // for (map<int, int>::iterator i = counts.begin (); i != c <
  //   fprintf (stderr, "# counts[%d] = %d\n", i->first, i->s <
  // }                                                        <
                                                              <
  // Perform pass #1, in which we find all explicit matches a <
  // the unique lines.  For every unique line that appears th <
  // number of times in both files, we declare the lines to m <
                                                                
  if (0 < optVerbose) {                                       | // The names of the 2 files to be diff'd.
    fprintf (stderr, "# Pass 1 (finding matches amongst uniqu <
  }                                                           <
                                                              <
  nMatchedLines = 0;                                          <
                                                              <
  for (MapStringToLinePtr::iterator i = table.begin (); i !=  <
    Line *l = i->second;                                      <
                                                              <
    // If the number of old and new lines match, then we decl <
    // they are (all) the same line.  Note, it isn't possible <
    // numbers of both files to be 0.                         <
                                                              <
    // (In the original algorithm, we only recognized a match <
    // if there was exactly 1 copy for each file.)            <
                                                              <
    if (l->copies[0].size () == l->copies[1].size ()) {       <
      nMatchedLines += 1;                                     <
                                                              <
      // For each matched line in the new file, mark it with  <
      // corresponding line (number) in the old file.         <
                                                              <
      while (!l->copies[0].empty ()) {                        <
        unsigned o = l->copies[0].front ();                   <
        unsigned n = l->copies[1].front ();                   <
                                                              <
        // Match up the pair.                                 <
                                                              <
        lines[0][o].l = n;                                    <
        lines[1][n].l = o;                                    <
                                                              <
        // Remove the matched line numbers from the lists.    <
                                                              <
        l->copies[0].pop_front ();                            <
        l->copies[1].pop_front ();                            <
      }                                                       <
    }                                                         <
  }                                                           <
  nTotalMatchedLines += nMatchedLines;                        <
                                                              <
  // Let's see the intermediate results.                      <
                                                              <
  if (0 < optVerbose) {                                       <
    fprintf (stderr, " found %u matched lines (%u total).\n", <
                                                              <
    if (1 < optVerbose) {                                     <
      for (int f = 0; f < 2; f += 1) {                        <
        fprintf (stderr, "# file #%d\n", f + 1);              <
        for (int l = 0; l < lines[f].size (); l += 1) {       <
          fprintf (stderr, "#   [%d] ", l);                   <
          lines[f][l].Dump (stderr);                          <
        }                                                     <
      }                                                       <
    }                                                         <
  }                                                           <
                                                                
  // Perform Pass #2, in which we attempt to 'widen' blocks o | char const *files[2] = { 0, 0 };
  // lines, by appending lines which are the same in both fil <
                                                                
  if (0 < optVerbose) {                                       | // The lines of the 2 files to be diff'd.
    fprintf (stderr, "# Pass #2 (spreading matches down)...") <
  }                                                           <
                                                              <
  nMatchedBlocks = 0;                                         <
  nMatchedLines = 0;                                          <
                                                              <
  // Starting at the top of the old file,...                  <
                                                              <
  for (unsigned o = 0; o < lines[0].size (); o += 1) {        <
                                                              <
    // ... skip any currently unmatched lines...              <
                                                              <
    if (lines[0][o].l == ~0) {                                <
      continue;                                               <
    }                                                         <
                                                              <
    // ... until we find an [already] matched line.  Then, sk <
    // the set of 1 or more matched lines, until we reach any <
    // following, still-unmatched line.                       <
                                                              <
    unsigned n;                                               <
    do {                                                      <
      n = lines[0][o].l + 1;                                  <
      o += 1;                                                 <
    } while (o < lines[0].size () && lines[0][o].l != ~0);    <
                                                              <
    // Now, o - 1 is the line number of the last matched old  <
    // n - 1 is the line number of the last matched new line. <
    // to add new old and new lines, if they match.           <
                                                              <
    // Finally, attempt to add unmatched lines to the preceed <
    // matched set.                                           <
                                                              <
    for (; o < lines[0].size () && lines[0][o].l == ~0; o +=  <
                                                              <
      // If the [next] pair of old and new lines aren't the s <
                                                              <
      if (lines[0][o].line != lines[1][n].line) {             <
        break;                                                <
      }                                                       <
                                                              <
      // Match up the pair.                                   <
                                                              <
      lines[0][o].l = n;                                      <
      lines[1][n].l = o;                                      <
                                                              <
      // Remove the matched line numbers form the lists.      <
                                                              <
      Line *line = lines[0][o].line;                          <
      list<unsigned> &oldCopies = line->copies[0];            <
      list<unsigned>::iterator oL = find (oldCopies.begin (), <
      if (oL != oldCopies.end ()) {                           <
        oldCopies.erase (oL);                                 <
      }                                                       <
      list<unsigned> &newCopies = line->copies[0];            <
      list<unsigned>::iterator nL = find (newCopies.begin (), <
      if (nL != newCopies.end ()) {                           <
        newCopies.erase (nL);                                 <
      }                                                       <
                                                              <
      nMatchedLines += 1;                                     <
    }                                                         <
    nMatchedBlocks += 1;                                      <
  }                                                           <
  nTotalMatchedLines += nMatchedLines;                        <
  nTotalMatchedBlocks += nMatchedBlocks;                      <
                                                              <
  // Let's see the intermediate results.                      <
                                                              <
  if (0 < optVerbose) {                                       <
    fprintf (stderr,                                          <
             " found %u/%u matched lines/blocks (%u/%u totals <
             nMatchedLines,                                   <
             nMatchedBlocks,                                  <
             nTotalMatchedLines,                              <
             nTotalMatchedBlocks                              <
            );                                                <
    if (1 < optVerbose) {                                     <
      for (int f = 0; f < 2; f += 1) {                        <
        fprintf (stderr, "# file #%d\n", f + 1);              <
        for (int l = 0; l < lines[f].size (); l += 1) {       <
          fprintf (stderr, "#   [%d] ", l);                   <
          lines[f][l].Dump (stderr);                          <
        }                                                     <
      }                                                       <
    }                                                         <
  }                                                           <
                                                                
  // Perform Pass #3, in which we attempt to 'widen' blocks o | VectorLinePtr lines[2];
  // lines, by prepending lines which are the same in both fi <
                                                                
  if (0 < optVerbose) {                                       | // Miscellaneous metrics.
    fprintf (stderr, "# Pass #3 (spreading matches up)...");  <
  }                                                           <
                                                              <
  nMatchedBlocks = 0;                                         <
  nMatchedLines = 0;                                          <
                                                              <
  // Starting at the bottom of the old file,...               <
                                                              <
  for (int o = lines[0].size (); 0 <= o; o -= 1) {            <
                                                              <
    // ... skip any currently unmatched lines...              <
                                                              <
    if (lines[0][o].l == ~0) {                                <
      continue;                                               <
    }                                                         <
                                                              <
    // ... until we find an [already] matched line.  Then, sk <
    // the set of 1 or more matched lines, until we reach any <
    // following, still-unmatched line.                       <
                                                              <
    unsigned n;                                               <
    do {                                                      <
      n = lines[0][o].l - 1;                                  <
      o -= 1;                                                 <
    } while (0 <= o && lines[0][o].l != ~0);                  <
                                                              <
    // Now, o + 1 is the line number of the last matched old  <
    // n + 1 is the line number of the last matched new line. <
    // to add new old and new lines, if they match.           <
                                                              <
    // Finally, attempt to add unmatched lines to the preceed <
    // matched set.                                           <
                                                              <
    for (; 0 <= o && lines[0][o].l == ~0; o -= 1, n -= 1) {   <
                                                              <
      // If the [next] pair of old and new lines aren't the s <
                                                              <
      if (lines[0][o].line != lines[1][n].line) {             <
        break;                                                <
      }                                                       <
                                                              <
      // Match up the pair.                                   <
                                                              <
      lines[0][o].l = n;                                      <
      lines[1][n].l = o;                                      <
                                                              <
      // Remove the matched line numbers form the lists.      <
                                                              <
      Line *line = lines[0][o].line;                          <
      list<unsigned> &oldCopies = line->copies[0];            <
      list<unsigned>::iterator oL = find (oldCopies.begin (), <
      if (oL != oldCopies.end ()) {                           <
        oldCopies.erase (oL);                                 <
      }                                                       <
      list<unsigned> &newCopies = line->copies[0];            <
      list<unsigned>::iterator nL = find (newCopies.begin (), <
      if (nL != newCopies.end ()) {                           <
        newCopies.erase (nL);                                 <
      }                                                       <
                                                              <
      nMatchedLines += 1;                                     <
    }                                                         <
    nMatchedBlocks += 1;                                      <
  }                                                           <
  nTotalMatchedLines += nMatchedLines;                        <
                                                              <
  // Let's see the intermediate results.                      <
                                                              <
  if (0 < optVerbose) {                                       <
    fprintf (stderr,                                          <
             " found %u/%u matched lines/blocks (%u/%u totals <
             nMatchedLines,                                   <
             nMatchedBlocks,                                  <
             nTotalMatchedLines,                              <
             nTotalMatchedBlocks                              <
            );                                                <
                                                              <
    if (1 < optVerbose) {                                     <
      for (int f = 0; f < 2; f += 1) {                        <
        fprintf (stderr, "# file #%d\n", f + 1);              <
        for (int l = 0; l < lines[f].size (); l += 1) {       <
          fprintf (stderr, "#   [%d] ", l);                   <
          lines[f][l].Dump (stderr);                          <
        }                                                     <
      }                                                       <
    }                                                         <
  }                                                           <
                                                                
  // Perform pass #4, in which we find any remaining matches  | unsigned nTotalMatchedBlocks = 0;
  // the unique lines.  For every unique line that has more t | unsigned nMatchedBlocks = 0;
  // copy in both files, we declare the copies to match.      | unsigned nTotalMatchedLines = 0;
                                                              > unsigned nMatchedLines = 0;
                                                                
  if (0 < optVerbose) {                                       | void pass1 ();
    fprintf (stderr, "# Pass 4 (finding remaining matches amo | void pass2 ();
  }                                                           | void pass3 ();
                                                              | void pass4 ();
  nMatchedLines = 0;                                          | void pass5 ();
                                                              | void pass6 ();
  for (MapStringToLinePtr::iterator i = table.begin (); i !=  | 
    Line *l = i->second;                                      | int main (int argc, char *argv[])
                                                              | {
    // If there's more than 1 matching old and new lines, the |   // Read the old [0] file, and the new [1] file.
    // declare that each pair are (all) the same line.        | 
                                                              |   for (int a = 1, n = 0; a < argc && n < 2; a += 1, n += 1) {
    // (In the original algorithm, we only recognized a match |     files[n] = argv[a];
    // if there was exactly 1 copy for each file.)            | 
                                                              |     if (FILE *f = fopen (files[n], "r")) {
    while (0 < l->copies[0].size () && 0 < l->copies[1].size  |       if (0 < optVerbose) {
      nMatchedLines += 1;                                     |         fprintf (stderr, "# Reading %s...", files[n]);
                                                              |       }
      // For each matched line in the new file, mark it with  | 
      // corresponding line (number) in the old file.         |       char buffer[1024];
                                                              |       unsigned nUniq = 0;
      unsigned o = l->copies[0].front ();                     | 
      unsigned n = l->copies[1].front ();                     |       while (fgets (buffer, sizeof (buffer), f)) {
                                                              |         string text (buffer);
      // Match up the pair.                                   | 
                                                              |         Line *line = table[text];
      lines[0][o].l = n;                                      | 
      lines[1][n].l = o;                                      |         if (!line) {
                                                              |           table[text] = line = new Line (text);
      // Remove the matched line numbers from the lists.      |           nUniq += 1;
                                                              |         }
      l->copies[0].pop_front ();                              |         line->copies[n].push_back (lines[n].size ());
      l->copies[1].pop_front ();                              |         lines[n].push_back (line);
    }                                                         |       }
  }                                                           | 
  nTotalMatchedLines += nMatchedLines;                        |       if (0 < optVerbose) {
                                                              |         fprintf (stderr, " %u lines, %u unique.\n", lines[n].
  // Let's see the intermediate results.                      |       }
                                                              |     } else {
  if (0 < optVerbose) {                                       |       fprintf (stderr, "%s: Unable to open %s!  Exiting....\n
    fprintf (stderr, " found %u matched lines (%u total).\n", |       perror (ARGV0);
                                                              |       exit (1);
    if (1 < optVerbose) {                                     |     }
      for (int f = 0; f < 2; f += 1) {                        |   }
        fprintf (stderr, "# file #%d\n", f + 1);              | 
        for (int l = 0; l < lines[f].size (); l += 1) {       |   if (0 < optVerbose) {
          fprintf (stderr, "#   [%d] ", l);                   |     fprintf (stderr, "# Total unique lines = %d\n", table.siz
          lines[f][l].Dump (stderr);                          |   }
        }                                                     | 
      }                                                       |   // map<int, int> counts;
    }                                                         |   // for (MapStringToLinePtr::iterator i = table.begin (); i 
  }                                                           |   //   Line *l = i->second;
                                                              >   //   counts[l->counts[0].size () + l->counts[1].size ()] +=
                                                              >   // }
                                                              >   // for (map<int, int>::iterator i = counts.begin (); i != c
                                                              >   //   fprintf (stderr, "# counts[%d] = %d\n", i->first, i->s
                                                              >   // }
                                                              > 
                                                              >   pass1 ();
                                                              >   pass2 ();
                                                              >   pass3 ();
                                                              >   pass4 ();
                                                              >   pass5 ();
                                                              >   pass6 ();
                                                                
  // Perform Pass #5, in which we look for blocks which match |   return 0;
  // the result of a move (their not in their original positi | }
  // these, we'll unmatch the blocks, turning them into a del <
  // an insert.                                               <
                                                                
  if (0 < optVerbose) {                                       | // Perform pass #1, in which we find all explicit matches amo
    fprintf (stderr, "# Pass #5 (unmatching block moves)...\n | // unique lines.  For every unique line that appears the same
  }                                                           | // of times in both files, we declare the lines to match.
                                                              <
  nMatchedBlocks = 0;                                         <
  nMatchedLines = 0;                                          <
                                                              <
  // Starting at the top of both files,...                    <
                                                              <
  unsigned o = 0;                                             <
  unsigned n = 0;                                             <
                                                              <
  while (o < lines[0].size () || n < lines[1].size ()) {      <
                                                              <
    // Skip any unmatched lines at this point in the old file <
    // are deletes.                                           <
                                                              <
    //    Old     New                                         <
    //   +---+                                                <
    // 0 | a |                                                <
    //   +---+   +---+                                        <
    //         0 | b |                                        <
    //   +---+   +---+                                        <
    // 1 | c | 1 | c |                                        <
    //   +---+   +---+                                        <
    //         2 | z |                                        <
    //   +---+   +---+                                        <
    // 2 | d | 3 | d |                                        <
    //   +---+   +---+                                        <
                                                              <
    while (o < lines[0].size () && lines[0][o].l == ~0) {     <
      o += 1;                                                 <
    }                                                         <
                                                              <
    // Skip any unmatched lines at this point in the new file <
    // are inserts.                                           <
                                                              <
    while (n < lines[1].size () && lines[1][n].l == ~0) {     <
      n += 1;                                                 <
    }                                                         <
                                                              <
    // When we get here, we know that we're dealing with matc <
    // lines (or the end of one or both files).  We're done w <
    // pass, if we've reached the end of either file.         <
                                                              <
    if (lines[0].size () <= o || lines[1].size () <= n) {     <
      break;                                                  <
    }                                                         <
                                                              <
    // We now know that we've got a pair of matching lines, t <
    // of a matching block.  If the new file's line number is <
    // expect, then the matched pair is unmoved, and we can s <
    // the pair.  (If this is really the start of a block of  <
    // 1 lines, we'll handle it one pair at a time.)          <
                                                              <
    if (lines[0][o].l == n) {                                 <
      o += 1;                                                 <
      n += 1;                                                 <
      continue;                                               <
    }                                                         <
                                                              <
    // If, on the other hand, we don't expect this [new] line <
    // then this matching block has been moved.  We need to t <
    // matched pair into an *unmatched* pair, one of deletes, <
    // of inserts.  First, though, we need to know how big th <
    // is, and how far it was moved....                       <
                                                              <
    // Remember where we were when we started.                <
                                                              <
    unsigned oOld = o;                                        <
    unsigned nOld = n;                                        <
                                                              <
    // Remember where the block came from.                    <
                                                              <
    unsigned nNew = lines[0][o].l;                            <
                                                              <
    // Find the end of this matched pair.                     <
                                                              <
    for (n = nNew; o < lines[0].size () && n < lines[1].size  <
      if (lines[0][o].l != n) {                               <
        break;                                                <
      }                                                       <
    }                                                         <
                                                              <
    // When we get here:                                      <
    // * oOld..o is the old file's block,                     <
    // * nNew..n is the new file's *moved* block, and         <
    // * nOld is where we originally expected the new block f <
                                                              <
    // We can now calculate the length of the block...        <
                                                              <
    unsigned bSize = o - oOld;  // (or n - nNew)              <
                                                              <
    // ... and we can calculate how far the block moved:      <
                                                              <
    unsigned bMove = nOld < nNew ? nNew - nOld : nOld - nNew; <
                                                              <
    // The larger of the two will become our delete, and the  <
    // will become our insert.                                <
                                                              <
    //    Old     New                                         <
    //   +---+   +---+                                        <
    // 0 | a | 0 | b |                                        <
    //   +---+ 1 | b |                                        <
    // 1 | b |   +---+                                        <
    // 2 | b | 2 | a |                                        <
    //   +---+   +---+                                        <
    // 3 | c | 3 | c |                                        <
    //   +---+   +---+                                        <
                                                              <
    // (1) Delete a@0, insert a@2, or                         <
    // (2) insert bb@0, delete bb@1?                          <
                                                              <
    // In (1), bSize (of a) is 1-0 or 1, the size of a@0, and <
    // (of a) is 2-0 or 2, the size of b@0.  We choose to del <
    // and reinsert a@2.                                      <
                                                              <
    // if (bSize <= bMove) {                                  <
      for (unsigned a = oOld; a < o; a += 1) {                <
        lines[0][a].l = ~0;                                   <
      }                                                       <
      for (unsigned d = nNew; d < n; d += 1) {                <
        lines[1][d].l = ~0;                                   <
      }                                                       <
    // } else {                                               <
      // for (unsigned a = oOld; a < o; a += 1) {             <
      //   lines[0][a].l = ~0;                                <
      // }                                                    <
      // for (unsigned d = nNew; d < n; d += 1) {             <
      //   lines[1][d].l = ~0;                                <
      // }                                                    <
    // }                                                      <
                                                              <
    // Continue from where we left off.                       <
                                                              <
    n = nOld;                                                 <
  }                                                           <
  nTotalMatchedLines -= nMatchedLines;                        <
  nTotalMatchedBlocks -= nMatchedBlocks;                      <
                                                              <
  // Let's see the intermediate results.                      <
                                                              <
  if (0 < optVerbose) {                                       <
    fprintf (stderr,                                          <
             " found %u/%u matched lines/blocks (%u/%u totals <
             nMatchedLines,                                   <
             nMatchedBlocks,                                  <
             nTotalMatchedLines,                              <
             nTotalMatchedBlocks                              <
            );                                                <
                                                              <
    if (1 < optVerbose) {                                     <
      for (int f = 0; f < 2; f += 1) {                        <
        fprintf (stderr, "# file #%d\n", f + 1);              <
        for (int l = 0; l < lines[f].size (); l += 1) {       <
          fprintf (stderr, "#   [%d] ", l);                   <
          lines[f][l].Dump (stderr);                          <
        }                                                     <
      }                                                       <
    }                                                         <
  }                                                           <
                                                                
  // Perform Pass #6, in which we create the desired output.  | void pass1 ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass 1 (finding matches amongst uniqu
                                                              >   }
                                                              > 
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   for (MapStringToLinePtr::iterator i = table.begin (); i != 
                                                              >     Line *l = i->second;
                                                              > 
                                                              >     // If the number of old and new lines match, then we decl
                                                              >     // they are (all) the same line.  Note, it isn't possible
                                                              >     // numbers of both files to be 0.
                                                              > 
                                                              >     // (In the original algorithm, we only recognized a match
                                                              >     // if there was exactly 1 copy for each file.)
                                                              > 
                                                              >     if (l->copies[0].size () == l->copies[1].size ()) {
                                                              >       nMatchedLines += 1;
                                                              > 
                                                              >       // For each matched line in the new file, mark it with 
                                                              >       // corresponding line (number) in the old file.
                                                              > 
                                                              >       while (!l->copies[0].empty ()) {
                                                              >         unsigned o = l->copies[0].front ();
                                                              >         unsigned n = l->copies[1].front ();
                                                              > 
                                                              >         // Match up the pair.
                                                              > 
                                                              >         lines[0][o].l = n;
                                                              >         lines[1][n].l = o;
                                                              > 
                                                              >         // Remove the matched line numbers from the lists.
                                                              > 
                                                              >         l->copies[0].pop_front ();
                                                              >         l->copies[1].pop_front ();
                                                              >       }
                                                              >     }
                                                              >   }
                                                              >   nTotalMatchedLines += nMatchedLines;
                                                              > 
                                                              >   // Let's see the intermediate results.
                                                              > 
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, " found %u matched lines (%u total).\n",
                                                              > 
                                                              >     if (1 < optVerbose) {
                                                              >       for (int f = 0; f < 2; f += 1) {
                                                              >         fprintf (stderr, "# file #%d\n", f + 1);
                                                              >         for (int l = 0; l < lines[f].size (); l += 1) {
                                                              >           fprintf (stderr, "#   [%d] ", l);
                                                              >           lines[f][l].Dump (stderr);
                                                              >         }
                                                              >       }
                                                              >     }
                                                              >   }
                                                              > }
                                                                
  if (0 < optVerbose) {                                       | // Perform Pass #2, in which we attempt to 'widen' blocks of 
    fprintf (stderr, "# Pass #6 (walking the differences)...\ | // lines, by appending lines which are the same in both files
  }                                                           <
                                                                
  nMatchedLines = 0;                                          | void pass2 ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass #2 (spreading matches down)...")
                                                              >   }
                                                              > 
                                                              >   nMatchedBlocks = 0;
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   // Starting at the top of the old file,...
                                                              > 
                                                              >   for (unsigned o = 0; o < lines[0].size (); o += 1) {
                                                              > 
                                                              >     // ... skip any currently unmatched lines...
                                                              > 
                                                              >     if (lines[0][o].l == ~0) {
                                                              >       continue;
                                                              >     }
                                                              > 
                                                              >     // ... until we find an [already] matched line.  Then, sk
                                                              >     // the set of 1 or more matched lines, until we reach any
                                                              >     // following, still-unmatched line.
                                                              > 
                                                              >     unsigned n;
                                                              >     do {
                                                              >       n = lines[0][o].l + 1;
                                                              >       o += 1;
                                                              >     } while (o < lines[0].size () && lines[0][o].l != ~0);
                                                              > 
                                                              >     // Now, o - 1 is the line number of the last matched old 
                                                              >     // n - 1 is the line number of the last matched new line.
                                                              >     // to add new old and new lines, if they match.
                                                              > 
                                                              >     // Finally, attempt to add unmatched lines to the preceed
                                                              >     // matched set.
                                                              > 
                                                              >     for (; o < lines[0].size () && lines[0][o].l == ~0; o += 
                                                              > 
                                                              >       // If the [next] pair of old and new lines aren't the s
                                                              > 
                                                              >       if (lines[0][o].line != lines[1][n].line) {
                                                              >         break;
                                                              >       }
                                                              > 
                                                              >       // Match up the pair.
                                                              > 
                                                              >       lines[0][o].l = n;
                                                              >       lines[1][n].l = o;
                                                              > 
                                                              >       // Remove the matched line numbers form the lists.
                                                              > 
                                                              >       Line *line = lines[0][o].line;
                                                              >       list<unsigned> &oldCopies = line->copies[0];
                                                              >       list<unsigned>::iterator oL = find (oldCopies.begin (),
                                                              >       if (oL != oldCopies.end ()) {
                                                              >         oldCopies.erase (oL);
                                                              >       }
                                                              >       list<unsigned> &newCopies = line->copies[0];
                                                              >       list<unsigned>::iterator nL = find (newCopies.begin (),
                                                              >       if (nL != newCopies.end ()) {
                                                              >         newCopies.erase (nL);
                                                              >       }
                                                              > 
                                                              >       nMatchedLines += 1;
                                                              >     }
                                                              >     nMatchedBlocks += 1;
                                                              >   }
                                                              >   nTotalMatchedLines += nMatchedLines;
                                                              >   nTotalMatchedBlocks += nMatchedBlocks;
                                                              > 
                                                              >   // Let's see the intermediate results.
                                                              > 
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr,
                                                              >              " found %u/%u matched lines/blocks (%u/%u totals
                                                              >              nMatchedLines,
                                                              >              nMatchedBlocks,
                                                              >              nTotalMatchedLines,
                                                              >              nTotalMatchedBlocks
                                                              >             );
                                                              >     if (1 < optVerbose) {
                                                              >       for (int f = 0; f < 2; f += 1) {
                                                              >         fprintf (stderr, "# file #%d\n", f + 1);
                                                              >         for (int l = 0; l < lines[f].size (); l += 1) {
                                                              >           fprintf (stderr, "#   [%d] ", l);
                                                              >           lines[f][l].Dump (stderr);
                                                              >         }
                                                              >       }
                                                              >     }
                                                              >   }
                                                              > }
                                                                
  // Write the header.                                        | // Perform Pass #3, in which we attempt to 'widen' blocks of 
                                                              | // lines, by prepending lines which are the same in both file
  switch (diffFormat) {                                       <
  case Default:                                               <
  case Normal:                                                <
    break;                                                    <
  case Unified:                                               <
    fprintf (stdout, "--- %s\t%s\n", files[0], "0000-00-00 00 <
    fprintf (stdout, "+++ %s\t%s\n", files[1], "0000-00-00 00 <
    fprintf (stdout, "@@ -1,%d +1,%d @@\n", lines[0].size (), <
    break;                                                    <
  }                                                           <
                                                                
  // Starting at the top of both files,...                    | void pass3 ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass #3 (spreading matches up)...");
                                                              >   }
                                                              > 
                                                              >   nMatchedBlocks = 0;
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   // Starting at the bottom of the old file,...
                                                              > 
                                                              >   for (int o = lines[0].size (); 0 <= o; o -= 1) {
                                                              > 
                                                              >     // ... skip any currently unmatched lines...
                                                              > 
                                                              >     if (lines[0][o].l == ~0) {
                                                              >       continue;
                                                              >     }
                                                              > 
                                                              >     // ... until we find an [already] matched line.  Then, sk
                                                              >     // the set of 1 or more matched lines, until we reach any
                                                              >     // following, still-unmatched line.
                                                              > 
                                                              >     unsigned n;
                                                              >     do {
                                                              >       n = lines[0][o].l - 1;
                                                              >       o -= 1;
                                                              >     } while (0 <= o && lines[0][o].l != ~0);
                                                              > 
                                                              >     // Now, o + 1 is the line number of the last matched old 
                                                              >     // n + 1 is the line number of the last matched new line.
                                                              >     // to add new old and new lines, if they match.
                                                              > 
                                                              >     // Finally, attempt to add unmatched lines to the preceed
                                                              >     // matched set.
                                                              > 
                                                              >     for (; 0 <= o && lines[0][o].l == ~0; o -= 1, n -= 1) {
                                                              > 
                                                              >       // If the [next] pair of old and new lines aren't the s
                                                              > 
                                                              >       if (lines[0][o].line != lines[1][n].line) {
                                                              >         break;
                                                              >       }
                                                              > 
                                                              >       // Match up the pair.
                                                              > 
                                                              >       lines[0][o].l = n;
                                                              >       lines[1][n].l = o;
                                                              > 
                                                              >       // Remove the matched line numbers form the lists.
                                                              > 
                                                              >       Line *line = lines[0][o].line;
                                                              >       list<unsigned> &oldCopies = line->copies[0];
                                                              >       list<unsigned>::iterator oL = find (oldCopies.begin (),
                                                              >       if (oL != oldCopies.end ()) {
                                                              >         oldCopies.erase (oL);
                                                              >       }
                                                              >       list<unsigned> &newCopies = line->copies[0];
                                                              >       list<unsigned>::iterator nL = find (newCopies.begin (),
                                                              >       if (nL != newCopies.end ()) {
                                                              >         newCopies.erase (nL);
                                                              >       }
                                                              > 
                                                              >       nMatchedLines += 1;
                                                              >     }
                                                              >     nMatchedBlocks += 1;
                                                              >   }
                                                              >   nTotalMatchedLines += nMatchedLines;
                                                              > 
                                                              >   // Let's see the intermediate results.
                                                              > 
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr,
                                                              >              " found %u/%u matched lines/blocks (%u/%u totals
                                                              >              nMatchedLines,
                                                              >              nMatchedBlocks,
                                                              >              nTotalMatchedLines,
                                                              >              nTotalMatchedBlocks
                                                              >             );
                                                              > 
                                                              >     if (1 < optVerbose) {
                                                              >       for (int f = 0; f < 2; f += 1) {
                                                              >         fprintf (stderr, "# file #%d\n", f + 1);
                                                              >         for (int l = 0; l < lines[f].size (); l += 1) {
                                                              >           fprintf (stderr, "#   [%d] ", l);
                                                              >           lines[f][l].Dump (stderr);
                                                              >         }
                                                              >       }
                                                              >     }
                                                              >   }
                                                              > }
                                                                
  o = 0;                                                      | // Perform pass #4, in which we find any remaining matches am
  n = 0;                                                      | // unique lines.  For every unique line that has more than 1 
                                                              > // both files, we declare the copies to match.
                                                                
  while (o < lines[0].size () || n < lines[1].size ()) {      | void pass4 ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass 4 (finding remaining matches amo
                                                              >   }
                                                              > 
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   for (MapStringToLinePtr::iterator i = table.begin (); i != 
                                                              >     Line *l = i->second;
                                                              > 
                                                              >     // If there's more than 1 matching old and new lines, the
                                                              >     // declare that each pair are (all) the same line.
                                                              > 
                                                              >     // (In the original algorithm, we only recognized a match
                                                              >     // if there was exactly 1 copy for each file.)
                                                              > 
                                                              >     while (0 < l->copies[0].size () && 0 < l->copies[1].size 
                                                              >       nMatchedLines += 1;
                                                              > 
                                                              >       // For each matched line in the new file, mark it with 
                                                              >       // corresponding line (number) in the old file.
                                                              > 
                                                              >       unsigned o = l->copies[0].front ();
                                                              >       unsigned n = l->copies[1].front ();
                                                              > 
                                                              >       // Match up the pair.
                                                              > 
                                                              >       lines[0][o].l = n;
                                                              >       lines[1][n].l = o;
                                                              > 
                                                              >       // Remove the matched line numbers from the lists.
                                                              > 
                                                              >       l->copies[0].pop_front ();
                                                              >       l->copies[1].pop_front ();
                                                              >     }
                                                              >   }
                                                              >   nTotalMatchedLines += nMatchedLines;
                                                              > 
                                                              >   // Let's see the intermediate results.
                                                              > 
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, " found %u matched lines (%u total).\n",
                                                              > 
                                                              >     if (1 < optVerbose) {
                                                              >       for (int f = 0; f < 2; f += 1) {
                                                              >         fprintf (stderr, "# file #%d\n", f + 1);
                                                              >         for (int l = 0; l < lines[f].size (); l += 1) {
                                                              >           fprintf (stderr, "#   [%d] ", l);
                                                              >           lines[f][l].Dump (stderr);
                                                              >         }
                                                              >       }
                                                              >     }
                                                              >   }
                                                              > }
                                                                
    // Find any unmatched lines at this point in the old file | // Perform Pass #5, in which we look for blocks which match, 
    // are deletes.                                           | // the result of a move (their not in their original position
                                                              > // these, we'll unmatch the blocks, turning them into a delet
                                                              > // insert.
                                                                
    unsigned boDeletes;                                       | void pass5 ()
    for (boDeletes = o;                                       | {
         o < lines[0].size () && lines[0][o].l == ~0;         |   if (0 < optVerbose) {
         o += 1                                               |     fprintf (stderr, "# Pass #5 (unmatching block moves)...\n
        )                                                     |   }
    {}                                                        | 
                                                              >   nMatchedBlocks = 0;
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   // Starting at the top of both files,...
                                                              > 
                                                              >   unsigned o = 0;
                                                              >   unsigned n = 0;
                                                              > 
                                                              >   while (o < lines[0].size () || n < lines[1].size ()) {
                                                              > 
                                                              >     // Skip any unmatched lines at this point in the old file
                                                              >     // are deletes.
                                                              > 
                                                              >     //    Old     New
                                                              >     //   +---+
                                                              >     // 0 | a |
                                                              >     //   +---+   +---+
                                                              >     //         0 | b |
                                                              >     //   +---+   +---+
                                                              >     // 1 | c | 1 | c |
                                                              >     //   +---+   +---+
                                                              >     //         2 | z |
                                                              >     //   +---+   +---+
                                                              >     // 2 | d | 3 | d |
                                                              >     //   +---+   +---+
                                                              > 
                                                              >     while (o < lines[0].size () && lines[0][o].l == ~0) {
                                                              >       o += 1;
                                                              >     }
                                                              > 
                                                              >     // Skip any unmatched lines at this point in the new file
                                                              >     // are inserts.
                                                              > 
                                                              >     while (n < lines[1].size () && lines[1][n].l == ~0) {
                                                              >       n += 1;
                                                              >     }
                                                              > 
                                                              >     // When we get here, we know that we're dealing with matc
                                                              >     // lines (or the end of one or both files).  We're done w
                                                              >     // pass, if we've reached the end of either file.
                                                              > 
                                                              >     if (lines[0].size () <= o || lines[1].size () <= n) {
                                                              >       break;
                                                              >     }
                                                              > 
                                                              >     // We now know that we've got a pair of matching lines, t
                                                              >     // of a matching block.  If the new file's line number is
                                                              >     // expect, then the matched pair is unmoved, and we can s
                                                              >     // the pair.  (If this is really the start of a block of 
                                                              >     // 1 lines, we'll handle it one pair at a time.)
                                                              > 
                                                              >     if (lines[0][o].l == n) {
                                                              >       o += 1;
                                                              >       n += 1;
                                                              >       continue;
                                                              >     }
                                                              > 
                                                              >     // If, on the other hand, we don't expect this [new] line
                                                              >     // then this matching block has been moved.  We need to t
                                                              >     // matched pair into an *unmatched* pair, one of deletes,
                                                              >     // of inserts.  First, though, we need to know how big th
                                                              >     // is, and how far it was moved....
                                                              > 
                                                              >     // Remember where we were when we started.
                                                              > 
                                                              >     unsigned oOld = o;
                                                              >     unsigned nOld = n;
                                                              > 
                                                              >     // Remember where the block came from.
                                                              > 
                                                              >     unsigned nNew = lines[0][o].l;
                                                              > 
                                                              >     // Find the end of this matched pair.
                                                              > 
                                                              >     for (n = nNew; o < lines[0].size () && n < lines[1].size 
                                                              >       if (lines[0][o].l != n) {
                                                              >         break;
                                                              >       }
                                                              >     }
                                                              > 
                                                              >     // When we get here:
                                                              >     // * oOld..o is the old file's block,
                                                              >     // * nNew..n is the new file's *moved* block, and
                                                              >     // * nOld is where we originally expected the new block f
                                                              >  
                                                              >     // We can now calculate the length of the block...
                                                              >     
                                                              >     unsigned bSize = o - oOld;  // (or n - nNew)
                                                              > 
                                                              >     // ... and we can calculate how far the block moved:
                                                              > 
                                                              >     unsigned bMove = nOld < nNew ? nNew - nOld : nOld - nNew;
                                                              > 
                                                              >     // The larger of the two will become our delete, and the 
                                                              >     // will become our insert.
                                                              > 
                                                              >     //    Old     New
                                                              >     //   +---+   +---+
                                                              >     // 0 | a | 0 | b |
                                                              >     //   +---+ 1 | b |
                                                              >     // 1 | b |   +---+
                                                              >     // 2 | b | 2 | a |
                                                              >     //   +---+   +---+
                                                              >     // 3 | c | 3 | c |
                                                              >     //   +---+   +---+
                                                              > 
                                                              >     // (1) Delete a@0, insert a@2, or
                                                              >     // (2) insert bb@0, delete bb@1?
                                                              > 
                                                              >     // In (1), bSize (of a) is 1-0 or 1, the size of a@0, and
                                                              >     // (of a) is 2-0 or 2, the size of b@0.  We choose to del
                                                              >     // and reinsert a@2.
                                                              > 
                                                              >     // if (bSize <= bMove) {
                                                              >       for (unsigned a = oOld; a < o; a += 1) {
                                                              >         lines[0][a].l = ~0;
                                                              >       }
                                                              >       for (unsigned d = nNew; d < n; d += 1) {
                                                              >         lines[1][d].l = ~0;
                                                              >       }
                                                              >     // } else {
                                                              >       // for (unsigned a = oOld; a < o; a += 1) {
                                                              >       //   lines[0][a].l = ~0;
                                                              >       // }
                                                              >       // for (unsigned d = nNew; d < n; d += 1) {
                                                              >       //   lines[1][d].l = ~0;
                                                              >       // }
                                                              >     // }
                                                              > 
                                                              >     // Continue from where we left off.
                                                              > 
                                                              >     n = nOld;
                                                              >   }
                                                              >   nTotalMatchedLines -= nMatchedLines;
                                                              >   nTotalMatchedBlocks -= nMatchedBlocks;
                                                              > 
                                                              >   // Let's see the intermediate results.
                                                              > 
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr,
                                                              >              " found %u/%u matched lines/blocks (%u/%u totals
                                                              >              nMatchedLines,
                                                              >              nMatchedBlocks,
                                                              >              nTotalMatchedLines,
                                                              >              nTotalMatchedBlocks
                                                              >             );
                                                              > 
                                                              >     if (1 < optVerbose) {
                                                              >       for (int f = 0; f < 2; f += 1) {
                                                              >         fprintf (stderr, "# file #%d\n", f + 1);
                                                              >         for (int l = 0; l < lines[f].size (); l += 1) {
                                                              >           fprintf (stderr, "#   [%d] ", l);
                                                              >           lines[f][l].Dump (stderr);
                                                              >         }
                                                              >       }
                                                              >     }
                                                              >   }
                                                              > }
                                                                
    // Find any unmatched lines at this point in the new file | // Perform Pass #6, in which we create the desired output.
    // are inserts.                                           <
                                                                
    unsigned boInserts;                                       | void pass6c ();
    for (boInserts = n;                                       | void pass6e ();
         n < lines[1].size () && lines[1][n].l == ~0;         | void pass6i ();
         n += 1                                               | void pass6n ();
        )                                                     | void pass6r ();
    {}                                                        | void pass6s ();
                                                              > void pass6u ();
                                                                
    // We've got deleted line(s) from boDeletes .. o.         | void pass6 ()
    // We've got deleted line(s) from boInserts .. n.         | {
                                                              > 
                                                              >   switch (diffFormat) {
                                                              >   case Context:
                                                              >     pass6c ();
                                                              >     break;
                                                                
    unsigned nDeletes = o - boDeletes;                        |   case EdScript:
    unsigned nInserts = n - boInserts;                        |     pass6e ();
                                                              >     break;
                                                                
    // We've got...                                           |   case IfThenElse:
                                                              >     pass6i ();
                                                              >     break;
                                                                
    if (nDeletes && nInserts) {                               |   case Normal:
                                                              >     pass6n ();
                                                              >     break;
                                                                
      // ... deletes and inserts.                             |   case RCS:
                                                              >     pass6r ();
                                                              >     break;
                                                                
      switch (diffFormat) {                                   |   case SideBySide:
      case Default:                                           |     pass6s ();
      case Normal:                                            |     break;
        if (1 < nDeletes && 1 < nInserts) {                   <
          fprintf (stdout, "%d,%dc%d,%d\n", boDeletes + 1, o, <
        } else if (1 < nDeletes) {                            <
          fprintf (stdout, "%d,%dc%d\n", boDeletes + 1, o, bo <
        } else if (1 < nInserts) {                            <
          fprintf (stdout, "%dc%d,%d\n", boDeletes + 1, boIns <
        }                                                     <
        for (unsigned l = boDeletes; l < o; l += 1) {         <
          fprintf (stdout, "< %s", lines[0][l].line->c_str () <
        }                                                     <
        fprintf (stderr, "---\n");                            <
        for (unsigned l = boInserts; l < n; l += 1) {         <
          fprintf (stdout, "> %s", lines[1][l].line->c_str () <
        }                                                     <
        break;                                                <
                                                                
      case Unified:                                           |   case Unified:
        for (unsigned l = boDeletes; l < o; l += 1) {         |     pass6u ();
          fprintf (stdout, "-%s", lines[0][l].line->c_str ()) |     break;
        }                                                     <
        for (unsigned l = boInserts; l < n; l += 1) {         <
          fprintf (stdout, "+%s", lines[1][l].line->c_str ()) <
        }                                                     <
        break;                                                <
      }                                                       <
    } else if (nDeletes) {                                    <
                                                                
      //  ... just deletes.                                   |   case Default:
                                                              >   default:
                                                              >     pass6c ();
                                                              >     break;
                                                              >   }
                                                              > }
                                                                
      switch (diffFormat) {                                   | template<typename T> T min (T l, T r) {
      case Default:                                           |   if (l < r) {
      case Normal:                                            |     return l;
        if (1 < nDeletes) {                                   |   }
          fprintf (stdout, "%d,%dd%d\n", boDeletes + 1, o, n) |   return r;
        } else {                                              | }
          fprintf (stdout, "%dd%d\n", boDeletes + 1, n);      <
        }                                                     <
        for (unsigned l = boDeletes; l < o; l += 1) {         <
          fprintf (stdout, "< %s", lines[0][l].line->c_str () <
        }                                                     <
        break;                                                <
      case Unified:                                           <
        for (unsigned l = boDeletes; l < o; l += 1) {         <
          fprintf (stdout, "-%s", lines[0][l].line->c_str ()) <
        }                                                     <
        break;                                                <
      }                                                       <
    } else if (nInserts) {                                    <
                                                                
      //  ... just inserts.                                   | template<typename T> T max (T l, T r) {
                                                              >   if (l < r) {
                                                              >     return r;
                                                              >   }
                                                              >   return l;
                                                              > }
                                                                
      switch (diffFormat) {                                   | void pass6c () {
      case Default:                                           |   if (0 < optVerbose) {
      case Normal:                                            |     fprintf (stderr, "# Pass #6u (walking the differences)...
        if (1 < nInserts) {                                   |   }
          fprintf (stdout, "%da%d,%d\n", o, boInserts + 1, n) <
        } else {                                              <
          fprintf (stdout, "%da%d\n", o, boInserts + 1);      <
        }                                                     <
        for (unsigned l = boInserts; l < n; l += 1) {         <
          fprintf (stdout, "> %s", lines[1][l].line->c_str () <
        }                                                     <
        break;                                                <
      case Unified:                                           <
        for (unsigned l = boInserts; l < n; l += 1) {         <
          fprintf (stdout, "+%s", lines[1][l].line->c_str ()) <
        }                                                     <
        break;                                                <
      }                                                       <
    }                                                         <
                                                                
    // When we get here, we're dealing with matching lines.   |   nMatchedLines = 0;
                                                                
    switch (diffFormat) {                                     |   // Write the header.
    case Default:                                             | 
    case Normal:                                              |   fprintf (stdout, "*** %s\t%s\n", files[0], "0000-00-00 00:0
      break;                                                  |   fprintf (stdout, "--- %s\t%s\n", files[1], "0000-00-00 00:0
    case Unified:                                             | 
      fprintf (stdout, " %s", lines[0][o].line->c_str ());    |   // Starting at the top of both files,...
      break;                                                  | 
                                                              >   unsigned o = 0;
                                                              >   unsigned n = 0;
                                                              > 
                                                              >   while (o < lines[0].size () || n < lines[1].size ()) {
                                                              > 
                                                              >     // Find any unmatched lines at this point in the old file
                                                              >     // are deletes.
                                                              > 
                                                              >     unsigned boDeletes;
                                                              >     for (boDeletes = o;
                                                              >          o < lines[0].size () && lines[0][o].l == ~0;
                                                              >          o += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // Find any unmatched lines at this point in the new file
                                                              >     // are inserts.
                                                              > 
                                                              >     unsigned boInserts;
                                                              >     for (boInserts = n;
                                                              >          n < lines[1].size () && lines[1][n].l == ~0;
                                                              >          n += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // We've got deleted line(s) from boDeletes .. o.
                                                              >     // We've got deleted line(s) from boInserts .. n.
                                                              > 
                                                              >     unsigned nDeletes = o - boDeletes;
                                                              >     unsigned nInserts = n - boInserts;
                                                              > 
                                                              >     // Have we got anything?
                                                              > 
                                                              >     if (nDeletes || nInserts) {
                                                              >       int boOldWindow = max (0, int (boDeletes) - int(optCopy
                                                              >       int eoOldWindow = min (int (lines[0].size ()), int(o) +
                                                              > 
                                                              >       int boNewWindow = max (0, int (boInserts) - int (optCop
                                                              >       int eoNewWindow = min (int (lines[1].size ()), int(n) +
                                                              > 
                                                              >       fprintf (stdout, "***************\n*** %d,%d ****", boO
                                                              >       for (unsigned l = boOldWindow; l < boDeletes; l += 1) {
                                                              >         fprintf (stdout, "  %s", lines[0][l].line->c_str ());
                                                              >       }
                                                              > 
                                                              >       // We've got...
                                                              > 
                                                              >       if (nDeletes && nInserts) {
                                                              > 
                                                              >         // ... deletes and inserts.
                                                              > 
                                                              >         for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >           fprintf (stdout, "! %s", lines[0][l].line->c_str ()
                                                              >         }
                                                              >       } else if (nDeletes) {
                                                              > 
                                                              >         //  ... just deletes.
                                                              > 
                                                              >         for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >           fprintf (stdout, "- %s", lines[0][l].line->c_str ()
                                                              >         }
                                                              >       }
                                                              > 
                                                              >       for (unsigned l = o; l < eoOldWindow; l += 1) {
                                                              >         fprintf (stdout, "  %s", lines[0][l].line->c_str ());
                                                              >       }
                                                              >       fprintf (stdout, "--- %d,%d ----", boNewWindow, eoNewWi
                                                              >       for (unsigned l = boNewWindow; l < boInserts; l += 1) {
                                                              >         fprintf (stdout, "  %s", lines[1][l].line->c_str ());
                                                              >       }
                                                              > 
                                                              >       // We've got...
                                                              > 
                                                              >       if (nDeletes && nInserts) {
                                                              > 
                                                              >         // ... deletes and inserts.
                                                              > 
                                                              >         for (unsigned l = boInserts; l < n; l += 1) {
                                                              >           fprintf (stdout, "! %s", lines[1][l].line->c_str ()
                                                              >         }
                                                              >       } else if (nInserts) {
                                                              > 
                                                              >         //  ... just inserts.
                                                              > 
                                                              >         for (unsigned l = boInserts; l < n; l += 1) {
                                                              >           fprintf (stdout, "+ %s", lines[1][l].line->c_str ()
                                                              >         }
                                                              >       }
                                                              > 
                                                              >       for (unsigned l = n; l < eoNewWindow; l += 1) {
                                                              >         fprintf (stdout, "  %s", lines[1][l].line->c_str ());
                                                              >       }
                                                              >     }
                                                              > 
                                                              >     // When we get here, we're dealing with matching lines.
                                                              > 
                                                              >     o += 1;
                                                              >     n += 1;
                                                              >   }
                                                              > }
                                                              > 
                                                              > void pass6e () {
                                                              > }
                                                              > 
                                                              > void pass6i () {
                                                              > }
                                                              > 
                                                              > void pass6n ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass #6n (walking the differences)...
                                                              >   }
                                                              > 
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   // Write the header.  (None for normal.)
                                                              > 
                                                              >   // Starting at the top of both files,...
                                                              > 
                                                              >   unsigned o = 0;
                                                              >   unsigned n = 0;
                                                              > 
                                                              >   while (o < lines[0].size () || n < lines[1].size ()) {
                                                              > 
                                                              >     // Find any unmatched lines at this point in the old file
                                                              >     // are deletes.
                                                              > 
                                                              >     unsigned boDeletes;
                                                              >     for (boDeletes = o;
                                                              >          o < lines[0].size () && lines[0][o].l == ~0;
                                                              >          o += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // Find any unmatched lines at this point in the new file
                                                              >     // are inserts.
                                                              > 
                                                              >     unsigned boInserts;
                                                              >     for (boInserts = n;
                                                              >          n < lines[1].size () && lines[1][n].l == ~0;
                                                              >          n += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // We've got deleted line(s) from boDeletes .. o.
                                                              >     // We've got deleted line(s) from boInserts .. n.
                                                              > 
                                                              >     unsigned nDeletes = o - boDeletes;
                                                              >     unsigned nInserts = n - boInserts;
                                                              > 
                                                              >     // We've got...
                                                              > 
                                                              >     if (nDeletes && nInserts) {
                                                              > 
                                                              >       // ... deletes and inserts.
                                                              > 
                                                              >       if (1 < nDeletes && 1 < nInserts) {
                                                              >         fprintf (stdout, "%d,%dc%d,%d\n", boDeletes + 1, o, b
                                                              >       } else if (1 < nDeletes) {
                                                              >         fprintf (stdout, "%d,%dc%d\n", boDeletes + 1, o, boIn
                                                              >       } else if (1 < nInserts) {
                                                              >         fprintf (stdout, "%dc%d,%d\n", boDeletes + 1, boInser
                                                              >       } 
                                                              >       for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >         fprintf (stdout, "< %s", lines[0][l].line->c_str ());
                                                              >       }
                                                              >       fprintf (stderr, "---\n");
                                                              >       for (unsigned l = boInserts; l < n; l += 1) {
                                                              >         fprintf (stdout, "> %s", lines[1][l].line->c_str ());
                                                              >       }
                                                              >     } else if (nDeletes) {
                                                              > 
                                                              >       //  ... just deletes.
                                                              > 
                                                              >       if (1 < nDeletes) {
                                                              >         fprintf (stdout, "%d,%dd%d\n", boDeletes + 1, o, n);
                                                              >       } else {
                                                              >         fprintf (stdout, "%dd%d\n", boDeletes + 1, n);
                                                              >       }
                                                              >       for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >         fprintf (stdout, "< %s", lines[0][l].line->c_str ());
                                                              >       }
                                                              >     } else if (nInserts) {
                                                              > 
                                                              >       //  ... just inserts.
                                                              > 
                                                              >       if (1 < nInserts) {
                                                              >         fprintf (stdout, "%da%d,%d\n", o, boInserts + 1, n);
                                                              >       } else {
                                                              >         fprintf (stdout, "%da%d\n", o, boInserts + 1);
                                                              >       }
                                                              >       for (unsigned l = boInserts; l < n; l += 1) {
                                                              >         fprintf (stdout, "> %s", lines[1][l].line->c_str ());
                                                              >       }
    }                                                               }
                                                              > 
                                                              >     // When we get here, we're dealing with matching lines.
                                                              > 
                                                              >     o += 1;
                                                              >     n += 1;
                                                              >   }
                                                              > }
                                                              > 
                                                              > void pass6r () {
                                                              > }
                                                              > 
                                                              > void pass6s () {
                                                              > }
                                                              > 
                                                              > void pass6u ()
                                                              > {
                                                              >   if (0 < optVerbose) {
                                                              >     fprintf (stderr, "# Pass #6u (walking the differences)...
                                                              >   }
                                                              > 
                                                              >   nMatchedLines = 0;
                                                              > 
                                                              >   // Write the header.
                                                              > 
                                                              >   fprintf (stdout, "--- %s\t%s\n", files[0], "0000-00-00 00:0
                                                              >   fprintf (stdout, "+++ %s\t%s\n", files[1], "0000-00-00 00:0
                                                              >   fprintf (stdout, "@@ -1,%d +1,%d @@\n", lines[0].size (), l
                                                              > 
                                                              >   // Starting at the top of both files,...
                                                              > 
                                                              >   unsigned o = 0;
                                                              >   unsigned n = 0;
                                                              > 
                                                              >   while (o < lines[0].size () || n < lines[1].size ()) {
                                                              > 
                                                              >     // Find any unmatched lines at this point in the old file
                                                              >     // are deletes.
                                                              > 
                                                              >     unsigned boDeletes;
                                                              >     for (boDeletes = o;
                                                              >          o < lines[0].size () && lines[0][o].l == ~0;
                                                              >          o += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // Find any unmatched lines at this point in the new file
                                                              >     // are inserts.
                                                              > 
                                                              >     unsigned boInserts;
                                                              >     for (boInserts = n;
                                                              >          n < lines[1].size () && lines[1][n].l == ~0;
                                                              >          n += 1
                                                              >         )
                                                              >     {}
                                                              > 
                                                              >     // We've got deleted line(s) from boDeletes .. o.
                                                              >     // We've got deleted line(s) from boInserts .. n.
                                                              > 
                                                              >     unsigned nDeletes = o - boDeletes;
                                                              >     unsigned nInserts = n - boInserts;
                                                              > 
                                                              >     // We've got...
                                                              > 
                                                              >     if (nDeletes && nInserts) {
                                                              > 
                                                              >       // ... deletes and inserts.
                                                              > 
                                                              >       for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >         fprintf (stdout, "-%s", lines[0][l].line->c_str ());
                                                              >       }
                                                              >       for (unsigned l = boInserts; l < n; l += 1) {
                                                              >         fprintf (stdout, "+%s", lines[1][l].line->c_str ());
                                                              >       }
                                                              >     } else if (nDeletes) {
                                                              > 
                                                              >       //  ... just deletes.
                                                              > 
                                                              >       for (unsigned l = boDeletes; l < o; l += 1) {
                                                              >         fprintf (stdout, "-%s", lines[0][l].line->c_str ());
                                                              >       }
                                                              >     } else if (nInserts) {
                                                              > 
                                                              >       //  ... just inserts.
                                                              > 
                                                              >       for (unsigned l = boInserts; l < n; l += 1) {
                                                              >         fprintf (stdout, "+%s", lines[1][l].line->c_str ());
                                                              >       }
                                                              >     }
                                                              > 
                                                              >     // When we get here, we're dealing with matching lines.
                                                              > 
                                                              >     fprintf (stdout, " %s", lines[0][o].line->c_str ());
    o += 1;                                                         o += 1;
    n += 1;                                                         n += 1;
  }                                                               }
}                                                               }
